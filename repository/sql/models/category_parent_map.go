// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// CategoryParentMap is an object representing the database table.
type CategoryParentMap struct {
	CateogryID       int `boil:"cateogry_id" json:"cateogry_id" toml:"cateogry_id" yaml:"cateogry_id"`
	ParentCategoryID int `boil:"parent_category_id" json:"parent_category_id" toml:"parent_category_id" yaml:"parent_category_id"`

	R *categoryParentMapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoryParentMapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoryParentMapColumns = struct {
	CateogryID       string
	ParentCategoryID string
}{
	CateogryID:       "cateogry_id",
	ParentCategoryID: "parent_category_id",
}

// categoryParentMapR is where relationships are stored.
type categoryParentMapR struct {
}

// categoryParentMapL is where Load methods for each relationship are stored.
type categoryParentMapL struct{}

var (
	categoryParentMapColumns               = []string{"cateogry_id", "parent_category_id"}
	categoryParentMapColumnsWithoutDefault = []string{"parent_category_id"}
	categoryParentMapColumnsWithDefault    = []string{"cateogry_id"}
	categoryParentMapPrimaryKeyColumns     = []string{"cateogry_id", "parent_category_id"}
)

type (
	// CategoryParentMapSlice is an alias for a slice of pointers to CategoryParentMap.
	// This should generally be used opposed to []CategoryParentMap.
	CategoryParentMapSlice []*CategoryParentMap

	categoryParentMapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoryParentMapType                 = reflect.TypeOf(&CategoryParentMap{})
	categoryParentMapMapping              = queries.MakeStructMapping(categoryParentMapType)
	categoryParentMapPrimaryKeyMapping, _ = queries.BindMapping(categoryParentMapType, categoryParentMapMapping, categoryParentMapPrimaryKeyColumns)
	categoryParentMapInsertCacheMut       sync.RWMutex
	categoryParentMapInsertCache          = make(map[string]insertCache)
	categoryParentMapUpdateCacheMut       sync.RWMutex
	categoryParentMapUpdateCache          = make(map[string]updateCache)
	categoryParentMapUpsertCacheMut       sync.RWMutex
	categoryParentMapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single categoryParentMap record from the query, and panics on error.
func (q categoryParentMapQuery) OneP() *CategoryParentMap {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single categoryParentMap record from the query.
func (q categoryParentMapQuery) One() (*CategoryParentMap, error) {
	o := &CategoryParentMap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for category_parent_map")
	}

	return o, nil
}

// AllP returns all CategoryParentMap records from the query, and panics on error.
func (q categoryParentMapQuery) AllP() CategoryParentMapSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all CategoryParentMap records from the query.
func (q categoryParentMapQuery) All() (CategoryParentMapSlice, error) {
	var o []*CategoryParentMap

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CategoryParentMap slice")
	}

	return o, nil
}

// CountP returns the count of all CategoryParentMap records in the query, and panics on error.
func (q categoryParentMapQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all CategoryParentMap records in the query.
func (q categoryParentMapQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count category_parent_map rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q categoryParentMapQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q categoryParentMapQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if category_parent_map exists")
	}

	return count > 0, nil
}

// CategoryParentMapsG retrieves all records.
func CategoryParentMapsG(mods ...qm.QueryMod) categoryParentMapQuery {
	return CategoryParentMaps(boil.GetDB(), mods...)
}

// CategoryParentMaps retrieves all the records using an executor.
func CategoryParentMaps(exec boil.Executor, mods ...qm.QueryMod) categoryParentMapQuery {
	mods = append(mods, qm.From("`category_parent_map`"))
	return categoryParentMapQuery{NewQuery(exec, mods...)}
}

// FindCategoryParentMapG retrieves a single record by ID.
func FindCategoryParentMapG(cateogryID int, parentCategoryID int, selectCols ...string) (*CategoryParentMap, error) {
	return FindCategoryParentMap(boil.GetDB(), cateogryID, parentCategoryID, selectCols...)
}

// FindCategoryParentMapGP retrieves a single record by ID, and panics on error.
func FindCategoryParentMapGP(cateogryID int, parentCategoryID int, selectCols ...string) *CategoryParentMap {
	retobj, err := FindCategoryParentMap(boil.GetDB(), cateogryID, parentCategoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCategoryParentMap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategoryParentMap(exec boil.Executor, cateogryID int, parentCategoryID int, selectCols ...string) (*CategoryParentMap, error) {
	categoryParentMapObj := &CategoryParentMap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `category_parent_map` where `cateogry_id`=? AND `parent_category_id`=?", sel,
	)

	q := queries.Raw(exec, query, cateogryID, parentCategoryID)

	err := q.Bind(categoryParentMapObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from category_parent_map")
	}

	return categoryParentMapObj, nil
}

// FindCategoryParentMapP retrieves a single record by ID with an executor, and panics on error.
func FindCategoryParentMapP(exec boil.Executor, cateogryID int, parentCategoryID int, selectCols ...string) *CategoryParentMap {
	retobj, err := FindCategoryParentMap(exec, cateogryID, parentCategoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CategoryParentMap) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *CategoryParentMap) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *CategoryParentMap) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *CategoryParentMap) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no category_parent_map provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(categoryParentMapColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	categoryParentMapInsertCacheMut.RLock()
	cache, cached := categoryParentMapInsertCache[key]
	categoryParentMapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			categoryParentMapColumns,
			categoryParentMapColumnsWithDefault,
			categoryParentMapColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(categoryParentMapType, categoryParentMapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoryParentMapType, categoryParentMapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `category_parent_map` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `category_parent_map` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `category_parent_map` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, categoryParentMapPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to insert into category_parent_map")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CateogryID,
		o.ParentCategoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for category_parent_map")
	}

CacheNoHooks:
	if !cached {
		categoryParentMapInsertCacheMut.Lock()
		categoryParentMapInsertCache[key] = cache
		categoryParentMapInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single CategoryParentMap record. See Update for
// whitelist behavior description.
func (o *CategoryParentMap) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single CategoryParentMap record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *CategoryParentMap) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the CategoryParentMap, and panics on error.
// See Update for whitelist behavior description.
func (o *CategoryParentMap) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the CategoryParentMap.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *CategoryParentMap) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	categoryParentMapUpdateCacheMut.RLock()
	cache, cached := categoryParentMapUpdateCache[key]
	categoryParentMapUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			categoryParentMapColumns,
			categoryParentMapPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update category_parent_map, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `category_parent_map` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, categoryParentMapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoryParentMapType, categoryParentMapMapping, append(wl, categoryParentMapPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update category_parent_map row")
	}

	if !cached {
		categoryParentMapUpdateCacheMut.Lock()
		categoryParentMapUpdateCache[key] = cache
		categoryParentMapUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q categoryParentMapQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q categoryParentMapQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for category_parent_map")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CategoryParentMapSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CategoryParentMapSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CategoryParentMapSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategoryParentMapSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryParentMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `category_parent_map` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, categoryParentMapPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in categoryParentMap slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CategoryParentMap) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *CategoryParentMap) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *CategoryParentMap) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *CategoryParentMap) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no category_parent_map provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryParentMapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoryParentMapUpsertCacheMut.RLock()
	cache, cached := categoryParentMapUpsertCache[key]
	categoryParentMapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			categoryParentMapColumns,
			categoryParentMapColumnsWithDefault,
			categoryParentMapColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			categoryParentMapColumns,
			categoryParentMapPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert category_parent_map, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "category_parent_map", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `category_parent_map` WHERE `cateogry_id`=? AND `parent_category_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(categoryParentMapType, categoryParentMapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoryParentMapType, categoryParentMapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for category_parent_map")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CateogryID,
		o.ParentCategoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for category_parent_map")
	}

CacheNoHooks:
	if !cached {
		categoryParentMapUpsertCacheMut.Lock()
		categoryParentMapUpsertCache[key] = cache
		categoryParentMapUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single CategoryParentMap record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CategoryParentMap) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single CategoryParentMap record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CategoryParentMap) DeleteG() error {
	if o == nil {
		return errors.New("models: no CategoryParentMap provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single CategoryParentMap record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CategoryParentMap) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single CategoryParentMap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CategoryParentMap) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CategoryParentMap provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoryParentMapPrimaryKeyMapping)
	sql := "DELETE FROM `category_parent_map` WHERE `cateogry_id`=? AND `parent_category_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from category_parent_map")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q categoryParentMapQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q categoryParentMapQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no categoryParentMapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from category_parent_map")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CategoryParentMapSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CategoryParentMapSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no CategoryParentMap slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CategoryParentMapSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategoryParentMapSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CategoryParentMap slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryParentMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `category_parent_map` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, categoryParentMapPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from categoryParentMap slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *CategoryParentMap) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *CategoryParentMap) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CategoryParentMap) ReloadG() error {
	if o == nil {
		return errors.New("models: no CategoryParentMap provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CategoryParentMap) Reload(exec boil.Executor) error {
	ret, err := FindCategoryParentMap(exec, o.CateogryID, o.ParentCategoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CategoryParentMapSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CategoryParentMapSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoryParentMapSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty CategoryParentMapSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoryParentMapSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	categoryParentMaps := CategoryParentMapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryParentMapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `category_parent_map`.* FROM `category_parent_map` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, categoryParentMapPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&categoryParentMaps)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CategoryParentMapSlice")
	}

	*o = categoryParentMaps

	return nil
}

// CategoryParentMapExists checks if the CategoryParentMap row exists.
func CategoryParentMapExists(exec boil.Executor, cateogryID int, parentCategoryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `category_parent_map` where `cateogry_id`=? AND `parent_category_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, cateogryID, parentCategoryID)
	}

	row := exec.QueryRow(sql, cateogryID, parentCategoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if category_parent_map exists")
	}

	return exists, nil
}

// CategoryParentMapExistsG checks if the CategoryParentMap row exists.
func CategoryParentMapExistsG(cateogryID int, parentCategoryID int) (bool, error) {
	return CategoryParentMapExists(boil.GetDB(), cateogryID, parentCategoryID)
}

// CategoryParentMapExistsGP checks if the CategoryParentMap row exists. Panics on error.
func CategoryParentMapExistsGP(cateogryID int, parentCategoryID int) bool {
	e, err := CategoryParentMapExists(boil.GetDB(), cateogryID, parentCategoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CategoryParentMapExistsP checks if the CategoryParentMap row exists. Panics on error.
func CategoryParentMapExistsP(exec boil.Executor, cateogryID int, parentCategoryID int) bool {
	e, err := CategoryParentMapExists(exec, cateogryID, parentCategoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
