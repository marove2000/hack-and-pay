// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Product is an object representing the database table.
type Product struct {
	ProductID    int         `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	SKU          int         `boil:"SKU" json:"SKU" toml:"SKU" yaml:"SKU"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	GTIN         null.String `boil:"GTIN" json:"GTIN,omitempty" toml:"GTIN" yaml:"GTIN,omitempty"`
	Price        string      `boil:"price" json:"price" toml:"price" yaml:"price"`
	AddedAt      time.Time   `boil:"added_at" json:"added_at" toml:"added_at" yaml:"added_at"`
	DeletedAt    null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	IsVisible    int8        `boil:"is_visible" json:"is_visible" toml:"is_visible" yaml:"is_visible"`
	Quantity     null.String `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	QuantityUnit null.String `boil:"quantity_unit" json:"quantity_unit,omitempty" toml:"quantity_unit" yaml:"quantity_unit,omitempty"`

	R *productR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductColumns = struct {
	ProductID    string
	SKU          string
	Name         string
	GTIN         string
	Price        string
	AddedAt      string
	DeletedAt    string
	IsVisible    string
	Quantity     string
	QuantityUnit string
}{
	ProductID:    "product_id",
	SKU:          "SKU",
	Name:         "name",
	GTIN:         "GTIN",
	Price:        "price",
	AddedAt:      "added_at",
	DeletedAt:    "deleted_at",
	IsVisible:    "is_visible",
	Quantity:     "quantity",
	QuantityUnit: "quantity_unit",
}

// productR is where relationships are stored.
type productR struct {
	Categories   CategorySlice
	Stocks       StockSlice
	Transactions TransactionSlice
}

// productL is where Load methods for each relationship are stored.
type productL struct{}

var (
	productColumns               = []string{"product_id", "SKU", "name", "GTIN", "price", "added_at", "deleted_at", "is_visible", "quantity", "quantity_unit"}
	productColumnsWithoutDefault = []string{"SKU", "name", "GTIN", "price", "deleted_at", "quantity", "quantity_unit"}
	productColumnsWithDefault    = []string{"product_id", "added_at", "is_visible"}
	productPrimaryKeyColumns     = []string{"product_id"}
)

type (
	// ProductSlice is an alias for a slice of pointers to Product.
	// This should generally be used opposed to []Product.
	ProductSlice []*Product

	productQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productType                 = reflect.TypeOf(&Product{})
	productMapping              = queries.MakeStructMapping(productType)
	productPrimaryKeyMapping, _ = queries.BindMapping(productType, productMapping, productPrimaryKeyColumns)
	productInsertCacheMut       sync.RWMutex
	productInsertCache          = make(map[string]insertCache)
	productUpdateCacheMut       sync.RWMutex
	productUpdateCache          = make(map[string]updateCache)
	productUpsertCacheMut       sync.RWMutex
	productUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single product record from the query, and panics on error.
func (q productQuery) OneP() *Product {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single product record from the query.
func (q productQuery) One() (*Product, error) {
	o := &Product{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for products")
	}

	return o, nil
}

// AllP returns all Product records from the query, and panics on error.
func (q productQuery) AllP() ProductSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Product records from the query.
func (q productQuery) All() (ProductSlice, error) {
	var o []*Product

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Product slice")
	}

	return o, nil
}

// CountP returns the count of all Product records in the query, and panics on error.
func (q productQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Product records in the query.
func (q productQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q productQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q productQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if products exists")
	}

	return count > 0, nil
}

// CategoriesG retrieves all the category's categories.
func (o *Product) CategoriesG(mods ...qm.QueryMod) categoryQuery {
	return o.Categories(boil.GetDB(), mods...)
}

// Categories retrieves all the category's categories with an executor.
func (o *Product) Categories(exec boil.Executor, mods ...qm.QueryMod) categoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`product_category_map` on `categories`.`category_id` = `product_category_map`.`category_id`"),
		qm.Where("`product_category_map`.`product_id`=?", o.ProductID),
	)

	query := Categories(exec, queryMods...)
	queries.SetFrom(query.Query, "`categories`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`categories`.*"})
	}

	return query
}

// StocksG retrieves all the stock's stock.
func (o *Product) StocksG(mods ...qm.QueryMod) stockQuery {
	return o.Stocks(boil.GetDB(), mods...)
}

// Stocks retrieves all the stock's stock with an executor.
func (o *Product) Stocks(exec boil.Executor, mods ...qm.QueryMod) stockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`stock`.`product_id`=?", o.ProductID),
	)

	query := Stocks(exec, queryMods...)
	queries.SetFrom(query.Query, "`stock`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`stock`.*"})
	}

	return query
}

// TransactionsG retrieves all the transaction's transactions.
func (o *Product) TransactionsG(mods ...qm.QueryMod) transactionQuery {
	return o.Transactions(boil.GetDB(), mods...)
}

// Transactions retrieves all the transaction's transactions with an executor.
func (o *Product) Transactions(exec boil.Executor, mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`transactions`.`product_id`=?", o.ProductID),
	)

	query := Transactions(exec, queryMods...)
	queries.SetFrom(query.Query, "`transactions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`transactions`.*"})
	}

	return query
}

// LoadCategories allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (productL) LoadCategories(e boil.Executor, singular bool, maybeProduct interface{}) error {
	var slice []*Product
	var object *Product

	count := 1
	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[0] = object.ProductID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}
			args[i] = obj.ProductID
		}
	}

	query := fmt.Sprintf(
		"select `a`.*, `b`.`product_id` from `categories` as `a` inner join `product_category_map` as `b` on `a`.`category_id` = `b`.`category_id` where `b`.`product_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categories")
	}
	defer results.Close()

	var resultSlice []*Category

	var localJoinCols []int
	for results.Next() {
		one := new(Category)
		var localJoinCol int

		err = results.Scan(&one.CategoryID, &one.Name, &one.Visible, &one.Active, &one.IsRoot, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice categories")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice categories")
	}

	if singular {
		object.R.Categories = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ProductID == localJoinCol {
				local.R.Categories = append(local.R.Categories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStocks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (productL) LoadStocks(e boil.Executor, singular bool, maybeProduct interface{}) error {
	var slice []*Product
	var object *Product

	count := 1
	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[0] = object.ProductID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}
			args[i] = obj.ProductID
		}
	}

	query := fmt.Sprintf(
		"select * from `stock` where `product_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stock")
	}
	defer results.Close()

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stock")
	}

	if singular {
		object.R.Stocks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductID == foreign.ProductID {
				local.R.Stocks = append(local.R.Stocks, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (productL) LoadTransactions(e boil.Executor, singular bool, maybeProduct interface{}) error {
	var slice []*Product
	var object *Product

	count := 1
	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[0] = object.ProductID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}
			args[i] = obj.ProductID
		}
	}

	query := fmt.Sprintf(
		"select * from `transactions` where `product_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}
	defer results.Close()

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if singular {
		object.R.Transactions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductID == foreign.ProductID.Int {
				local.R.Transactions = append(local.R.Transactions, foreign)
				break
			}
		}
	}

	return nil
}

// AddCategoriesG adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Categories.
// Sets related.R.Products appropriately.
// Uses the global database handle.
func (o *Product) AddCategoriesG(insert bool, related ...*Category) error {
	return o.AddCategories(boil.GetDB(), insert, related...)
}

// AddCategoriesP adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Categories.
// Sets related.R.Products appropriately.
// Panics on error.
func (o *Product) AddCategoriesP(exec boil.Executor, insert bool, related ...*Category) {
	if err := o.AddCategories(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCategoriesGP adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Categories.
// Sets related.R.Products appropriately.
// Uses the global database handle and panics on error.
func (o *Product) AddCategoriesGP(insert bool, related ...*Category) {
	if err := o.AddCategories(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCategories adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Categories.
// Sets related.R.Products appropriately.
func (o *Product) AddCategories(exec boil.Executor, insert bool, related ...*Category) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `product_category_map` (`product_id`, `category_id`) values (?, ?)"
		values := []interface{}{o.ProductID, rel.CategoryID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &productR{
			Categories: related,
		}
	} else {
		o.R.Categories = append(o.R.Categories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoryR{
				Products: ProductSlice{o},
			}
		} else {
			rel.R.Products = append(rel.R.Products, o)
		}
	}
	return nil
}

// SetCategoriesG removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Products's Categories accordingly.
// Replaces o.R.Categories with related.
// Sets related.R.Products's Categories accordingly.
// Uses the global database handle.
func (o *Product) SetCategoriesG(insert bool, related ...*Category) error {
	return o.SetCategories(boil.GetDB(), insert, related...)
}

// SetCategoriesP removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Products's Categories accordingly.
// Replaces o.R.Categories with related.
// Sets related.R.Products's Categories accordingly.
// Panics on error.
func (o *Product) SetCategoriesP(exec boil.Executor, insert bool, related ...*Category) {
	if err := o.SetCategories(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategoriesGP removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Products's Categories accordingly.
// Replaces o.R.Categories with related.
// Sets related.R.Products's Categories accordingly.
// Uses the global database handle and panics on error.
func (o *Product) SetCategoriesGP(insert bool, related ...*Category) {
	if err := o.SetCategories(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategories removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Products's Categories accordingly.
// Replaces o.R.Categories with related.
// Sets related.R.Products's Categories accordingly.
func (o *Product) SetCategories(exec boil.Executor, insert bool, related ...*Category) error {
	query := "delete from `product_category_map` where `product_id` = ?"
	values := []interface{}{o.ProductID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCategoriesFromProductsSlice(o, related)
	if o.R != nil {
		o.R.Categories = nil
	}
	return o.AddCategories(exec, insert, related...)
}

// RemoveCategoriesG relationships from objects passed in.
// Removes related items from R.Categories (uses pointer comparison, removal does not keep order)
// Sets related.R.Products.
// Uses the global database handle.
func (o *Product) RemoveCategoriesG(related ...*Category) error {
	return o.RemoveCategories(boil.GetDB(), related...)
}

// RemoveCategoriesP relationships from objects passed in.
// Removes related items from R.Categories (uses pointer comparison, removal does not keep order)
// Sets related.R.Products.
// Panics on error.
func (o *Product) RemoveCategoriesP(exec boil.Executor, related ...*Category) {
	if err := o.RemoveCategories(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCategoriesGP relationships from objects passed in.
// Removes related items from R.Categories (uses pointer comparison, removal does not keep order)
// Sets related.R.Products.
// Uses the global database handle and panics on error.
func (o *Product) RemoveCategoriesGP(related ...*Category) {
	if err := o.RemoveCategories(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCategories relationships from objects passed in.
// Removes related items from R.Categories (uses pointer comparison, removal does not keep order)
// Sets related.R.Products.
func (o *Product) RemoveCategories(exec boil.Executor, related ...*Category) error {
	var err error
	query := fmt.Sprintf(
		"delete from `product_category_map` where `product_id` = ? and `category_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ProductID}
	for _, rel := range related {
		values = append(values, rel.CategoryID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCategoriesFromProductsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Categories {
			if rel != ri {
				continue
			}

			ln := len(o.R.Categories)
			if ln > 1 && i < ln-1 {
				o.R.Categories[i] = o.R.Categories[ln-1]
			}
			o.R.Categories = o.R.Categories[:ln-1]
			break
		}
	}

	return nil
}

func removeCategoriesFromProductsSlice(o *Product, related []*Category) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Products {
			if o.ProductID != ri.ProductID {
				continue
			}

			ln := len(rel.R.Products)
			if ln > 1 && i < ln-1 {
				rel.R.Products[i] = rel.R.Products[ln-1]
			}
			rel.R.Products = rel.R.Products[:ln-1]
			break
		}
	}
}

// AddStocksG adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Stocks.
// Sets related.R.Product appropriately.
// Uses the global database handle.
func (o *Product) AddStocksG(insert bool, related ...*Stock) error {
	return o.AddStocks(boil.GetDB(), insert, related...)
}

// AddStocksP adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Stocks.
// Sets related.R.Product appropriately.
// Panics on error.
func (o *Product) AddStocksP(exec boil.Executor, insert bool, related ...*Stock) {
	if err := o.AddStocks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStocksGP adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Stocks.
// Sets related.R.Product appropriately.
// Uses the global database handle and panics on error.
func (o *Product) AddStocksGP(insert bool, related ...*Stock) {
	if err := o.AddStocks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStocks adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Stocks.
// Sets related.R.Product appropriately.
func (o *Product) AddStocks(exec boil.Executor, insert bool, related ...*Stock) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ProductID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `stock` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, stockPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductID, rel.StockID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ProductID
		}
	}

	if o.R == nil {
		o.R = &productR{
			Stocks: related,
		}
	} else {
		o.R.Stocks = append(o.R.Stocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// AddTransactionsG adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Product appropriately.
// Uses the global database handle.
func (o *Product) AddTransactionsG(insert bool, related ...*Transaction) error {
	return o.AddTransactions(boil.GetDB(), insert, related...)
}

// AddTransactionsP adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Product appropriately.
// Panics on error.
func (o *Product) AddTransactionsP(exec boil.Executor, insert bool, related ...*Transaction) {
	if err := o.AddTransactions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionsGP adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Product appropriately.
// Uses the global database handle and panics on error.
func (o *Product) AddTransactionsGP(insert bool, related ...*Transaction) {
	if err := o.AddTransactions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactions adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Product appropriately.
func (o *Product) AddTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID.Int = o.ProductID
			rel.ProductID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `transactions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductID, rel.PaymentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID.Int = o.ProductID
			rel.ProductID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &productR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetTransactionsG removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Product's Transactions accordingly.
// Uses the global database handle.
func (o *Product) SetTransactionsG(insert bool, related ...*Transaction) error {
	return o.SetTransactions(boil.GetDB(), insert, related...)
}

// SetTransactionsP removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Product's Transactions accordingly.
// Panics on error.
func (o *Product) SetTransactionsP(exec boil.Executor, insert bool, related ...*Transaction) {
	if err := o.SetTransactions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionsGP removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Product's Transactions accordingly.
// Uses the global database handle and panics on error.
func (o *Product) SetTransactionsGP(insert bool, related ...*Transaction) {
	if err := o.SetTransactions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactions removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Product's Transactions accordingly.
func (o *Product) SetTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	query := "update `transactions` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ProductID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Transactions {
			rel.ProductID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.Transactions = nil
	}
	return o.AddTransactions(exec, insert, related...)
}

// RemoveTransactionsG relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
// Uses the global database handle.
func (o *Product) RemoveTransactionsG(related ...*Transaction) error {
	return o.RemoveTransactions(boil.GetDB(), related...)
}

// RemoveTransactionsP relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
// Panics on error.
func (o *Product) RemoveTransactionsP(exec boil.Executor, related ...*Transaction) {
	if err := o.RemoveTransactions(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionsGP relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
// Uses the global database handle and panics on error.
func (o *Product) RemoveTransactionsGP(related ...*Transaction) {
	if err := o.RemoveTransactions(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactions relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *Product) RemoveTransactions(exec boil.Executor, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		rel.ProductID.Valid = false
		if rel.R != nil {
			rel.R.Product = nil
		}
		if err = rel.Update(exec, "product_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Transactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Transactions)
			if ln > 1 && i < ln-1 {
				o.R.Transactions[i] = o.R.Transactions[ln-1]
			}
			o.R.Transactions = o.R.Transactions[:ln-1]
			break
		}
	}

	return nil
}

// ProductsG retrieves all records.
func ProductsG(mods ...qm.QueryMod) productQuery {
	return Products(boil.GetDB(), mods...)
}

// Products retrieves all the records using an executor.
func Products(exec boil.Executor, mods ...qm.QueryMod) productQuery {
	mods = append(mods, qm.From("`products`"))
	return productQuery{NewQuery(exec, mods...)}
}

// FindProductG retrieves a single record by ID.
func FindProductG(productID int, selectCols ...string) (*Product, error) {
	return FindProduct(boil.GetDB(), productID, selectCols...)
}

// FindProductGP retrieves a single record by ID, and panics on error.
func FindProductGP(productID int, selectCols ...string) *Product {
	retobj, err := FindProduct(boil.GetDB(), productID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProduct(exec boil.Executor, productID int, selectCols ...string) (*Product, error) {
	productObj := &Product{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `products` where `product_id`=?", sel,
	)

	q := queries.Raw(exec, query, productID)

	err := q.Bind(productObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from products")
	}

	return productObj, nil
}

// FindProductP retrieves a single record by ID with an executor, and panics on error.
func FindProductP(exec boil.Executor, productID int, selectCols ...string) *Product {
	retobj, err := FindProduct(exec, productID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Product) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Product) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Product) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Product) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no products provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	productInsertCacheMut.RLock()
	cache, cached := productInsertCache[key]
	productInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			productColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productType, productMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `products` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `products` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `products` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into products")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ProductID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == productMapping["ProductID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for products")
	}

CacheNoHooks:
	if !cached {
		productInsertCacheMut.Lock()
		productInsertCache[key] = cache
		productInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Product record. See Update for
// whitelist behavior description.
func (o *Product) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Product record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Product) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Product, and panics on error.
// See Update for whitelist behavior description.
func (o *Product) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Product.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Product) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	productUpdateCacheMut.RLock()
	cache, cached := productUpdateCache[key]
	productUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			productColumns,
			productPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `products` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productType, productMapping, append(wl, productPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update products row")
	}

	if !cached {
		productUpdateCacheMut.Lock()
		productUpdateCache[key] = cache
		productUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q productQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q productQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for products")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProductSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ProductSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ProductSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in product slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Product) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Product) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Product) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Product) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no products provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productUpsertCacheMut.RLock()
	cache, cached := productUpsertCache[key]
	productUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			productColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			productColumns,
			productPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert products, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "products", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `products` WHERE `product_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productType, productMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for products")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ProductID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == productMapping["ProductID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for products")
	}

CacheNoHooks:
	if !cached {
		productUpsertCacheMut.Lock()
		productUpsertCache[key] = cache
		productUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Product record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Product) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Product record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Product) DeleteG() error {
	if o == nil {
		return errors.New("models: no Product provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Product record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Product) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Product record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Product) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Product provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPrimaryKeyMapping)
	sql := "DELETE FROM `products` WHERE `product_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from products")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q productQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q productQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no productQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from products")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ProductSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ProductSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Product slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ProductSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Product slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `products` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from product slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Product) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Product) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Product) ReloadG() error {
	if o == nil {
		return errors.New("models: no Product provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Product) Reload(exec boil.Executor) error {
	ret, err := FindProduct(exec, o.ProductID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ProductSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ProductSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ProductSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	products := ProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `products`.* FROM `products` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&products)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSlice")
	}

	*o = products

	return nil
}

// ProductExists checks if the Product row exists.
func ProductExists(exec boil.Executor, productID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `products` where `product_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, productID)
	}

	row := exec.QueryRow(sql, productID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if products exists")
	}

	return exists, nil
}

// ProductExistsG checks if the Product row exists.
func ProductExistsG(productID int) (bool, error) {
	return ProductExists(boil.GetDB(), productID)
}

// ProductExistsGP checks if the Product row exists. Panics on error.
func ProductExistsGP(productID int) bool {
	e, err := ProductExists(boil.GetDB(), productID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ProductExistsP checks if the Product row exists. Panics on error.
func ProductExistsP(exec boil.Executor, productID int) bool {
	e, err := ProductExists(exec, productID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
