// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// Category is an object representing the database table.
type Category struct {
	CategoryID int      `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	Name       string   `boil:"name" json:"name" toml:"name" yaml:"name"`
	IsVisible  string   `boil:"is_visible" json:"is_visible" toml:"is_visible" yaml:"is_visible"`
	IsActive   string   `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	ParentID   null.Int `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`

	R *categoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoryColumns = struct {
	CategoryID string
	Name       string
	IsVisible  string
	IsActive   string
	ParentID   string
}{
	CategoryID: "category_id",
	Name:       "name",
	IsVisible:  "is_visible",
	IsActive:   "is_active",
	ParentID:   "parent_id",
}

// categoryR is where relationships are stored.
type categoryR struct {
	Parent           *Category
	ParentCategories CategorySlice
	Products         ProductSlice
}

// categoryL is where Load methods for each relationship are stored.
type categoryL struct{}

var (
	categoryColumns               = []string{"category_id", "name", "is_visible", "is_active", "parent_id"}
	categoryColumnsWithoutDefault = []string{"name", "parent_id"}
	categoryColumnsWithDefault    = []string{"category_id", "is_visible", "is_active"}
	categoryPrimaryKeyColumns     = []string{"category_id"}
)

type (
	// CategorySlice is an alias for a slice of pointers to Category.
	// This should generally be used opposed to []Category.
	CategorySlice []*Category

	categoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoryType                 = reflect.TypeOf(&Category{})
	categoryMapping              = queries.MakeStructMapping(categoryType)
	categoryPrimaryKeyMapping, _ = queries.BindMapping(categoryType, categoryMapping, categoryPrimaryKeyColumns)
	categoryInsertCacheMut       sync.RWMutex
	categoryInsertCache          = make(map[string]insertCache)
	categoryUpdateCacheMut       sync.RWMutex
	categoryUpdateCache          = make(map[string]updateCache)
	categoryUpsertCacheMut       sync.RWMutex
	categoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single category record from the query, and panics on error.
func (q categoryQuery) OneP() *Category {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single category record from the query.
func (q categoryQuery) One() (*Category, error) {
	o := &Category{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for categories")
	}

	return o, nil
}

// AllP returns all Category records from the query, and panics on error.
func (q categoryQuery) AllP() CategorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Category records from the query.
func (q categoryQuery) All() (CategorySlice, error) {
	var o []*Category

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Category slice")
	}

	return o, nil
}

// CountP returns the count of all Category records in the query, and panics on error.
func (q categoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Category records in the query.
func (q categoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q categoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q categoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if categories exists")
	}

	return count > 0, nil
}

// ParentG pointed to by the foreign key.
func (o *Category) ParentG(mods ...qm.QueryMod) categoryQuery {
	return o.Parent(boil.GetDB(), mods...)
}

// Parent pointed to by the foreign key.
func (o *Category) Parent(exec boil.Executor, mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("category_id=?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	query := Categories(exec, queryMods...)
	queries.SetFrom(query.Query, "`categories`")

	return query
}

// ParentCategoriesG retrieves all the category's categories via parent_id column.
func (o *Category) ParentCategoriesG(mods ...qm.QueryMod) categoryQuery {
	return o.ParentCategories(boil.GetDB(), mods...)
}

// ParentCategories retrieves all the category's categories with an executor via parent_id column.
func (o *Category) ParentCategories(exec boil.Executor, mods ...qm.QueryMod) categoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`categories`.`parent_id`=?", o.CategoryID),
	)

	query := Categories(exec, queryMods...)
	queries.SetFrom(query.Query, "`categories`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`categories`.*"})
	}

	return query
}

// ProductsG retrieves all the product's products.
func (o *Category) ProductsG(mods ...qm.QueryMod) productQuery {
	return o.Products(boil.GetDB(), mods...)
}

// Products retrieves all the product's products with an executor.
func (o *Category) Products(exec boil.Executor, mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`product_category_map` on `products`.`product_id` = `product_category_map`.`product_id`"),
		qm.Where("`product_category_map`.`category_id`=?", o.CategoryID),
	)

	query := Products(exec, queryMods...)
	queries.SetFrom(query.Query, "`products`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`products`.*"})
	}

	return query
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (categoryL) LoadParent(e boil.Executor, singular bool, maybeCategory interface{}) error {
	var slice []*Category
	var object *Category

	count := 1
	if singular {
		object = maybeCategory.(*Category)
	} else {
		slice = *maybeCategory.(*[]*Category)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args[0] = object.ParentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}
			args[i] = obj.ParentID
		}
	}

	query := fmt.Sprintf(
		"select * from `categories` where `category_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}
	defer results.Close()

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Parent = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ParentID.Int == foreign.CategoryID {
				local.R.Parent = foreign
				break
			}
		}
	}

	return nil
}

// LoadParentCategories allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (categoryL) LoadParentCategories(e boil.Executor, singular bool, maybeCategory interface{}) error {
	var slice []*Category
	var object *Category

	count := 1
	if singular {
		object = maybeCategory.(*Category)
	} else {
		slice = *maybeCategory.(*[]*Category)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args[0] = object.CategoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}
			args[i] = obj.CategoryID
		}
	}

	query := fmt.Sprintf(
		"select * from `categories` where `parent_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categories")
	}
	defer results.Close()

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice categories")
	}

	if singular {
		object.R.ParentCategories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CategoryID == foreign.ParentID.Int {
				local.R.ParentCategories = append(local.R.ParentCategories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (categoryL) LoadProducts(e boil.Executor, singular bool, maybeCategory interface{}) error {
	var slice []*Category
	var object *Category

	count := 1
	if singular {
		object = maybeCategory.(*Category)
	} else {
		slice = *maybeCategory.(*[]*Category)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args[0] = object.CategoryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}
			args[i] = obj.CategoryID
		}
	}

	query := fmt.Sprintf(
		"select `a`.*, `b`.`category_id` from `products` as `a` inner join `product_category_map` as `b` on `a`.`product_id` = `b`.`product_id` where `b`.`category_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}
	defer results.Close()

	var resultSlice []*Product

	var localJoinCols []int
	for results.Next() {
		one := new(Product)
		var localJoinCol int

		err = results.Scan(&one.ProductID, &one.SKUID, &one.Name, &one.GTIN, &one.Price, &one.AddedAt, &one.DeletedAt, &one.IsVisible, &one.Quantity, &one.QuantityUnit, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice products")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice products")
	}

	if singular {
		object.R.Products = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.CategoryID == localJoinCol {
				local.R.Products = append(local.R.Products, foreign)
				break
			}
		}
	}

	return nil
}

// SetParentG of the category to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentCategories.
// Uses the global database handle.
func (o *Category) SetParentG(insert bool, related *Category) error {
	return o.SetParent(boil.GetDB(), insert, related)
}

// SetParentP of the category to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentCategories.
// Panics on error.
func (o *Category) SetParentP(exec boil.Executor, insert bool, related *Category) {
	if err := o.SetParent(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentGP of the category to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentCategories.
// Uses the global database handle and panics on error.
func (o *Category) SetParentGP(insert bool, related *Category) {
	if err := o.SetParent(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParent of the category to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentCategories.
func (o *Category) SetParent(exec boil.Executor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `categories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"parent_id"}),
		strmangle.WhereClause("`", "`", 0, categoryPrimaryKeyColumns),
	)
	values := []interface{}{related.CategoryID, o.CategoryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ParentID.Int = related.CategoryID
	o.ParentID.Valid = true

	if o.R == nil {
		o.R = &categoryR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &categoryR{
			ParentCategories: CategorySlice{o},
		}
	} else {
		related.R.ParentCategories = append(related.R.ParentCategories, o)
	}

	return nil
}

// RemoveParentG relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Category) RemoveParentG(related *Category) error {
	return o.RemoveParent(boil.GetDB(), related)
}

// RemoveParentP relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Category) RemoveParentP(exec boil.Executor, related *Category) {
	if err := o.RemoveParent(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentGP relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Category) RemoveParentGP(related *Category) {
	if err := o.RemoveParent(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Category) RemoveParent(exec boil.Executor, related *Category) error {
	var err error

	o.ParentID.Valid = false
	if err = o.Update(exec, "parent_id"); err != nil {
		o.ParentID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Parent = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentCategories {
		if o.ParentID.Int != ri.ParentID.Int {
			continue
		}

		ln := len(related.R.ParentCategories)
		if ln > 1 && i < ln-1 {
			related.R.ParentCategories[i] = related.R.ParentCategories[ln-1]
		}
		related.R.ParentCategories = related.R.ParentCategories[:ln-1]
		break
	}
	return nil
}

// AddParentCategoriesG adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.ParentCategories.
// Sets related.R.Parent appropriately.
// Uses the global database handle.
func (o *Category) AddParentCategoriesG(insert bool, related ...*Category) error {
	return o.AddParentCategories(boil.GetDB(), insert, related...)
}

// AddParentCategoriesP adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.ParentCategories.
// Sets related.R.Parent appropriately.
// Panics on error.
func (o *Category) AddParentCategoriesP(exec boil.Executor, insert bool, related ...*Category) {
	if err := o.AddParentCategories(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentCategoriesGP adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.ParentCategories.
// Sets related.R.Parent appropriately.
// Uses the global database handle and panics on error.
func (o *Category) AddParentCategoriesGP(insert bool, related ...*Category) {
	if err := o.AddParentCategories(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentCategories adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.ParentCategories.
// Sets related.R.Parent appropriately.
func (o *Category) AddParentCategories(exec boil.Executor, insert bool, related ...*Category) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ParentID.Int = o.CategoryID
			rel.ParentID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `categories` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"parent_id"}),
				strmangle.WhereClause("`", "`", 0, categoryPrimaryKeyColumns),
			)
			values := []interface{}{o.CategoryID, rel.CategoryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ParentID.Int = o.CategoryID
			rel.ParentID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			ParentCategories: related,
		}
	} else {
		o.R.ParentCategories = append(o.R.ParentCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoryR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentCategoriesG removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentCategories accordingly.
// Replaces o.R.ParentCategories with related.
// Sets related.R.Parent's ParentCategories accordingly.
// Uses the global database handle.
func (o *Category) SetParentCategoriesG(insert bool, related ...*Category) error {
	return o.SetParentCategories(boil.GetDB(), insert, related...)
}

// SetParentCategoriesP removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentCategories accordingly.
// Replaces o.R.ParentCategories with related.
// Sets related.R.Parent's ParentCategories accordingly.
// Panics on error.
func (o *Category) SetParentCategoriesP(exec boil.Executor, insert bool, related ...*Category) {
	if err := o.SetParentCategories(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentCategoriesGP removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentCategories accordingly.
// Replaces o.R.ParentCategories with related.
// Sets related.R.Parent's ParentCategories accordingly.
// Uses the global database handle and panics on error.
func (o *Category) SetParentCategoriesGP(insert bool, related ...*Category) {
	if err := o.SetParentCategories(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentCategories removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentCategories accordingly.
// Replaces o.R.ParentCategories with related.
// Sets related.R.Parent's ParentCategories accordingly.
func (o *Category) SetParentCategories(exec boil.Executor, insert bool, related ...*Category) error {
	query := "update `categories` set `parent_id` = null where `parent_id` = ?"
	values := []interface{}{o.CategoryID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentCategories {
			rel.ParentID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}

		o.R.ParentCategories = nil
	}
	return o.AddParentCategories(exec, insert, related...)
}

// RemoveParentCategoriesG relationships from objects passed in.
// Removes related items from R.ParentCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle.
func (o *Category) RemoveParentCategoriesG(related ...*Category) error {
	return o.RemoveParentCategories(boil.GetDB(), related...)
}

// RemoveParentCategoriesP relationships from objects passed in.
// Removes related items from R.ParentCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Panics on error.
func (o *Category) RemoveParentCategoriesP(exec boil.Executor, related ...*Category) {
	if err := o.RemoveParentCategories(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentCategoriesGP relationships from objects passed in.
// Removes related items from R.ParentCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle and panics on error.
func (o *Category) RemoveParentCategoriesGP(related ...*Category) {
	if err := o.RemoveParentCategories(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentCategories relationships from objects passed in.
// Removes related items from R.ParentCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *Category) RemoveParentCategories(exec boil.Executor, related ...*Category) error {
	var err error
	for _, rel := range related {
		rel.ParentID.Valid = false
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if err = rel.Update(exec, "parent_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentCategories)
			if ln > 1 && i < ln-1 {
				o.R.ParentCategories[i] = o.R.ParentCategories[ln-1]
			}
			o.R.ParentCategories = o.R.ParentCategories[:ln-1]
			break
		}
	}

	return nil
}

// AddProductsG adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Categories appropriately.
// Uses the global database handle.
func (o *Category) AddProductsG(insert bool, related ...*Product) error {
	return o.AddProducts(boil.GetDB(), insert, related...)
}

// AddProductsP adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Categories appropriately.
// Panics on error.
func (o *Category) AddProductsP(exec boil.Executor, insert bool, related ...*Product) {
	if err := o.AddProducts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProductsGP adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Categories appropriately.
// Uses the global database handle and panics on error.
func (o *Category) AddProductsGP(insert bool, related ...*Product) {
	if err := o.AddProducts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProducts adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Categories appropriately.
func (o *Category) AddProducts(exec boil.Executor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `product_category_map` (`category_id`, `product_id`) values (?, ?)"
		values := []interface{}{o.CategoryID, rel.ProductID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &categoryR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Categories: CategorySlice{o},
			}
		} else {
			rel.R.Categories = append(rel.R.Categories, o)
		}
	}
	return nil
}

// SetProductsG removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Categories's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.Categories's Products accordingly.
// Uses the global database handle.
func (o *Category) SetProductsG(insert bool, related ...*Product) error {
	return o.SetProducts(boil.GetDB(), insert, related...)
}

// SetProductsP removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Categories's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.Categories's Products accordingly.
// Panics on error.
func (o *Category) SetProductsP(exec boil.Executor, insert bool, related ...*Product) {
	if err := o.SetProducts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetProductsGP removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Categories's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.Categories's Products accordingly.
// Uses the global database handle and panics on error.
func (o *Category) SetProductsGP(insert bool, related ...*Product) {
	if err := o.SetProducts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetProducts removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Categories's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.Categories's Products accordingly.
func (o *Category) SetProducts(exec boil.Executor, insert bool, related ...*Product) error {
	query := "delete from `product_category_map` where `category_id` = ?"
	values := []interface{}{o.CategoryID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeProductsFromCategoriesSlice(o, related)
	if o.R != nil {
		o.R.Products = nil
	}
	return o.AddProducts(exec, insert, related...)
}

// RemoveProductsG relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.Categories.
// Uses the global database handle.
func (o *Category) RemoveProductsG(related ...*Product) error {
	return o.RemoveProducts(boil.GetDB(), related...)
}

// RemoveProductsP relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.Categories.
// Panics on error.
func (o *Category) RemoveProductsP(exec boil.Executor, related ...*Product) {
	if err := o.RemoveProducts(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveProductsGP relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.Categories.
// Uses the global database handle and panics on error.
func (o *Category) RemoveProductsGP(related ...*Product) {
	if err := o.RemoveProducts(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveProducts relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.Categories.
func (o *Category) RemoveProducts(exec boil.Executor, related ...*Product) error {
	var err error
	query := fmt.Sprintf(
		"delete from `product_category_map` where `category_id` = ? and `product_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.CategoryID}
	for _, rel := range related {
		values = append(values, rel.ProductID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeProductsFromCategoriesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Products {
			if rel != ri {
				continue
			}

			ln := len(o.R.Products)
			if ln > 1 && i < ln-1 {
				o.R.Products[i] = o.R.Products[ln-1]
			}
			o.R.Products = o.R.Products[:ln-1]
			break
		}
	}

	return nil
}

func removeProductsFromCategoriesSlice(o *Category, related []*Product) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Categories {
			if o.CategoryID != ri.CategoryID {
				continue
			}

			ln := len(rel.R.Categories)
			if ln > 1 && i < ln-1 {
				rel.R.Categories[i] = rel.R.Categories[ln-1]
			}
			rel.R.Categories = rel.R.Categories[:ln-1]
			break
		}
	}
}

// CategoriesG retrieves all records.
func CategoriesG(mods ...qm.QueryMod) categoryQuery {
	return Categories(boil.GetDB(), mods...)
}

// Categories retrieves all the records using an executor.
func Categories(exec boil.Executor, mods ...qm.QueryMod) categoryQuery {
	mods = append(mods, qm.From("`categories`"))
	return categoryQuery{NewQuery(exec, mods...)}
}

// FindCategoryG retrieves a single record by ID.
func FindCategoryG(categoryID int, selectCols ...string) (*Category, error) {
	return FindCategory(boil.GetDB(), categoryID, selectCols...)
}

// FindCategoryGP retrieves a single record by ID, and panics on error.
func FindCategoryGP(categoryID int, selectCols ...string) *Category {
	retobj, err := FindCategory(boil.GetDB(), categoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategory(exec boil.Executor, categoryID int, selectCols ...string) (*Category, error) {
	categoryObj := &Category{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `categories` where `category_id`=?", sel,
	)

	q := queries.Raw(exec, query, categoryID)

	err := q.Bind(categoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from categories")
	}

	return categoryObj, nil
}

// FindCategoryP retrieves a single record by ID with an executor, and panics on error.
func FindCategoryP(exec boil.Executor, categoryID int, selectCols ...string) *Category {
	retobj, err := FindCategory(exec, categoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Category) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Category) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Category) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Category) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no categories provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(categoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	categoryInsertCacheMut.RLock()
	cache, cached := categoryInsertCache[key]
	categoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			categoryColumns,
			categoryColumnsWithDefault,
			categoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(categoryType, categoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoryType, categoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `categories` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `categories` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `categories` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, categoryPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into categories")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CategoryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == categoryMapping["CategoryID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CategoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for categories")
	}

CacheNoHooks:
	if !cached {
		categoryInsertCacheMut.Lock()
		categoryInsertCache[key] = cache
		categoryInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Category record. See Update for
// whitelist behavior description.
func (o *Category) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Category record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Category) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Category, and panics on error.
// See Update for whitelist behavior description.
func (o *Category) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Category.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Category) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	categoryUpdateCacheMut.RLock()
	cache, cached := categoryUpdateCache[key]
	categoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			categoryColumns,
			categoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `categories` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, categoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoryType, categoryMapping, append(wl, categoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update categories row")
	}

	if !cached {
		categoryUpdateCacheMut.Lock()
		categoryUpdateCache[key] = cache
		categoryUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q categoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q categoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for categories")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CategorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CategorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CategorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `categories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, categoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in category slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Category) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Category) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Category) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Category) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no categories provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoryUpsertCacheMut.RLock()
	cache, cached := categoryUpsertCache[key]
	categoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			categoryColumns,
			categoryColumnsWithDefault,
			categoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			categoryColumns,
			categoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert categories, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "categories", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `categories` WHERE `category_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(categoryType, categoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoryType, categoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for categories")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CategoryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == categoryMapping["CategoryID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CategoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for categories")
	}

CacheNoHooks:
	if !cached {
		categoryUpsertCacheMut.Lock()
		categoryUpsertCache[key] = cache
		categoryUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Category record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Category) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Category record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Category) DeleteG() error {
	if o == nil {
		return errors.New("models: no Category provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Category record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Category) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Category record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Category) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Category provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoryPrimaryKeyMapping)
	sql := "DELETE FROM `categories` WHERE `category_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from categories")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q categoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q categoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no categoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from categories")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CategorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CategorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Category slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CategorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Category slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, categoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from category slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Category) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Category) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Category) ReloadG() error {
	if o == nil {
		return errors.New("models: no Category provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Category) Reload(exec boil.Executor) error {
	ret, err := FindCategory(exec, o.CategoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CategorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CategorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty CategorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	categories := CategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `categories`.* FROM `categories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, categoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&categories)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CategorySlice")
	}

	*o = categories

	return nil
}

// CategoryExists checks if the Category row exists.
func CategoryExists(exec boil.Executor, categoryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `categories` where `category_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, categoryID)
	}

	row := exec.QueryRow(sql, categoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if categories exists")
	}

	return exists, nil
}

// CategoryExistsG checks if the Category row exists.
func CategoryExistsG(categoryID int) (bool, error) {
	return CategoryExists(boil.GetDB(), categoryID)
}

// CategoryExistsGP checks if the Category row exists. Panics on error.
func CategoryExistsGP(categoryID int) bool {
	e, err := CategoryExists(boil.GetDB(), categoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CategoryExistsP checks if the Category row exists. Panics on error.
func CategoryExistsP(exec boil.Executor, categoryID int) bool {
	e, err := CategoryExists(exec, categoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
