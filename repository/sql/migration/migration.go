// Code generated by go-bindata.
// sources:
// repository/migration/resources/001_initial_db.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resources001_initial_dbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5b\x6f\xa3\x48\x16\x7e\xf7\xaf\x28\xa9\x1f\x1c\x6b\x9d\x88\xba\x03\xa3\x91\x96\xd8\xa4\x17\xad\x83\xb3\x36\x6e\x4d\x3f\x59\x65\x83\x13\x14\x5f\xb2\x36\xee\xd9\xfc\xfb\x55\x71\x2d\x30\x60\x32\x9d\x1e\x4b\x9d\x86\xa2\xce\xed\x3b\xa7\xbe\x73\xea\xf6\x16\xfc\x63\x17\x3e\x1f\x45\x14\x80\xc5\x5b\xaf\x37\x9a\xd9\x96\x67\x03\xcf\xba\x9f\xd8\xc0\x79\x00\xee\xd4\x03\xf6\x1f\xce\xdc\x9b\x83\xb5\x88\x82\xe7\xc3\x31\x0c\x4e\xe0\xa6\x07\xb2\xd7\xf7\x65\xe8\x03\xc7\xf5\x6e\x20\x1c\x00\x00\x62\x01\x77\x31\x99\x00\x60\x2d\xbc\xe9\xd2\x71\x47\x33\xfb\xd1\x76\xbd\x61\x0f\x80\xbd\xd8\x05\x20\xfd\xd5\x88\xc8\x2d\x3f\xc2\x53\xb8\xda\x26\xbb\x3c\xc7\xfd\x1e\x6f\x1b\x28\x5a\xc7\xf6\x83\xb5\x98\x78\xa0\x0f\xfb\x72\xbf\x58\x47\xe1\x8f\x54\x69\xfb\x7e\x2d\xde\x1f\x9e\x96\xc7\xc3\x21\xea\xac\xff\x69\xe6\x3c\x5a\xb3\xef\xe0\xdf\xf6\x77\x70\xa3\x84\x3c\xe8\x0d\x7a\x00\xd8\xee\x57\xc7\xb5\xc1\xef\xc0\xd9\xef\x0f\xe3\xfb\x5e\x21\x3e\xfa\x97\x35\x9b\xdb\x1e\xf8\x1d\x9c\xa3\x8d\xbe\x5b\x91\xdf\xba\x60\xfb\xbe\x7c\x13\xc7\x60\x1f\x2d\x77\xe2\x2d\x07\xf9\xf0\x9c\x80\x5c\x01\xae\x0d\xe8\x54\x4b\x5d\x8a\x54\xb0\x2f\x82\x4b\x4d\x0d\x6b\x14\x7c\x72\xc0\xd1\x51\xec\x4f\x32\x79\x87\x7d\x52\x4e\x6f\xe2\x7d\x27\x4d\x96\xab\xa9\x5c\x51\xea\xef\x32\xe8\xf3\x29\x38\xa6\x38\x35\x68\x88\xa1\x39\x1e\xfc\xf3\xba\xd6\x4e\x56\x82\x62\x7b\x4e\x2b\x6a\x6c\x8f\x9c\x47\x6b\x72\x03\xe9\x10\xa0\x32\x76\x91\x78\xce\x04\xbf\x59\x33\x19\xfd\x0d\xa2\x74\x00\x9a\x7e\x19\x4e\x99\xbc\xf0\xfd\xc0\x5f\x8a\x28\xae\xc3\x47\x7b\xee\x59\x8f\x4f\x6d\xf1\xe6\x38\x2f\x66\x33\xdb\xf5\x96\xb9\x50\x1c\xfa\x9b\x2f\xa2\x44\x5d\x55\xd9\x85\xa2\x3a\x67\x4a\x85\x50\x64\x62\x20\xbf\x39\xee\xd8\xfe\x03\xdc\xa4\xe8\x7e\x72\x19\xa4\xd9\x48\x4b\xa0\x48\x4d\x73\x0e\xaf\x55\x81\xca\x31\x17\xa9\x51\x13\xf8\xd5\x73\xdc\x62\x63\xbc\x0b\x92\xe6\xfc\xd5\xc1\xf6\x76\x0c\xd7\x81\xf2\xb5\xb1\x58\x94\x64\xcb\x8d\x96\x67\xcb\x34\xb5\x46\xd6\x35\xdf\x97\xfa\xba\xf9\xee\x07\xdb\xe0\x27\x55\x84\xa7\xa5\x42\xd7\x0a\x9b\x5e\x8f\x2a\x65\xd7\xff\x9e\xc5\x3e\x0a\xa3\xf7\x5a\x00\xbb\x39\x91\xa9\x58\x9e\xf7\x61\xf4\xd7\x8e\x62\xb9\xfa\xf3\x22\xfc\x35\xa5\x5e\x70\x6a\xc6\xf1\x6a\xd9\x77\x21\xf7\x0f\xb1\x7a\xa1\x7c\x08\x7e\x1d\x9b\x9f\xa2\xc3\xfa\x35\x0e\x26\x7e\x4a\x4e\x70\x71\x80\x5b\x5b\x55\x1d\x1f\xab\xe1\x34\xd3\x7a\x6b\x3d\xd4\x3a\x90\x9e\xc5\xec\x30\x16\x5c\x79\xd9\xff\x6b\xcf\x5d\x09\xda\x2c\xd4\x4f\xc6\x52\xc6\x9b\xf0\x61\x53\xe4\x1d\x47\xac\xec\x2c\x40\xa3\x52\x20\xc1\x4e\x84\xdb\x9a\x3d\xcd\xa0\xae\x8f\x41\xc6\x37\x25\xa6\xe8\x08\x9b\x42\x57\x0d\x44\xd3\xc2\x4e\x1d\x25\x56\xdb\xc3\xfa\xb5\xa6\x05\x16\x1c\x54\x43\x5f\xc2\xdf\x85\xfb\x2a\x77\x35\xce\x8e\xa5\xec\xff\x44\x3f\xbc\x96\xfd\xa5\x38\x47\x2f\x4a\x09\xc8\xd7\x8b\x79\xa5\xad\x08\x94\xc2\x69\x28\x1d\xb9\x6b\x17\x44\x2f\x07\xbf\x52\x2c\x31\x71\x96\x06\xf2\x62\x1a\x4a\x70\xba\x9f\x4c\xef\xeb\xd1\x48\xfd\xfc\x2b\x90\x58\x13\xcf\x9e\xa5\x80\xa8\xa3\x61\x0f\x00\x6b\x3c\x06\xa3\xa9\x3b\xf7\x66\x96\xe3\x7a\x60\xf3\xba\x54\x37\x2c\x93\xe3\xf2\x30\x9d\xd9\xce\x57\xb7\x9c\x1a\x30\xb3\x1f\xec\x99\xed\x8e\xec\xfc\x54\xe5\x59\x03\x60\xea\x82\xb1\x3d\xb1\x3d\x1b\xb8\x53\x60\x8d\x3c\x67\xea\x26\xab\x8b\x27\x59\x72\xc5\xea\xf0\xba\x13\xf9\x18\x53\xf2\x43\x69\x25\xaa\x2b\xc5\xcc\xa3\xf6\x9a\x0f\x38\x54\xc1\xab\xae\xb1\x5c\xba\x5c\xb7\x6b\x19\xae\x36\xaf\x4b\x58\xf6\x5a\xed\x12\xaa\xdb\xea\xf5\xaf\xd4\x49\x54\xcf\x47\xd6\x7c\x64\x8d\xed\x92\xdf\xe9\x5a\x0d\x8c\xcd\x3e\xa1\x4f\x42\xb2\xc5\x9f\x0a\x8a\x31\x9b\x5f\xba\x98\x92\x7c\x0d\x4e\x1f\xad\x32\x59\xf2\xf2\x50\x95\x7c\xc9\x16\x6b\xc0\x51\x2c\xff\xfd\x68\x14\x34\x54\x5b\xfc\xc5\xe7\xf8\xf1\xe7\x80\x69\xf7\xea\x0b\x70\xdc\xb9\x3d\xf3\x24\x8f\x4d\xb3\x5b\x62\x7e\x49\x71\xc6\xc3\x58\xb7\xfc\x3f\x5d\xfa\x26\x09\x2b\x7f\xf3\xc4\x73\xf1\x1c\xee\x02\x4b\x36\xff\xd2\xca\xe8\x45\xec\x9f\x03\x7f\x00\xbe\x59\x93\x85\x3d\xef\x7d\x01\x00\xdc\xc0\x21\x40\xda\x10\xf4\xe1\x1d\xc2\xfd\x21\xe8\xcb\x7f\x48\x83\xfc\x16\xa2\x5b\x08\x01\xc4\x26\xc5\x26\xd6\xfb\xc3\x38\x7b\x83\x61\x22\x85\x53\x29\x43\xfd\xdd\x19\x46\x83\x06\x6e\x6a\xb8\xa2\x81\x7c\x58\x03\xa9\x68\xa0\x3f\xad\x81\x7d\x58\x03\xad\x68\xe0\xa9\x06\x04\x31\x21\x77\x9a\xd6\x28\x89\xb4\x8a\xa4\xde\x41\x92\x9a\x90\x9b\x90\x57\x24\x8d\x4e\x92\x08\x9a\x1a\xac\x48\x42\xad\x9b\x28\x32\x69\x15\x2a\x08\xbb\x89\x62\x13\x57\x23\x85\xa8\xb3\xe8\x85\xc3\xb8\xb3\x68\xb5\xbe\x20\xe9\x26\x4a\x4d\x5c\x05\x18\xd2\xce\xa2\x46\x55\x94\x75\x15\xa5\x17\x0e\x67\xb5\x04\x11\x6e\x16\x64\x35\x59\xd5\x15\x41\x8c\x1a\x05\x11\xaa\x0a\x66\x95\x74\x0b\xaf\x88\xd2\x6a\x4e\x91\x76\x4d\x94\x02\x88\x4c\x68\x98\x84\x65\xa2\xbf\xf5\xbe\x54\x39\x2e\x61\xef\x9c\xc6\x63\x6e\x4b\x1e\x5d\xb1\x0b\xf2\x97\xaf\x9e\xe3\xe6\x2f\x4f\xc7\x70\x5d\x7c\x52\x99\xae\x58\x49\x99\xae\xb4\x36\x4e\x06\xed\x7c\xed\x5b\x72\xa1\x1f\x82\xa7\xe4\xfd\x3f\xe9\x75\xea\x62\x61\xb1\x0f\xa3\x41\xef\x4b\x89\x35\xf1\x10\xf4\x47\xdb\xf3\xea\xf6\x51\x44\x01\xd0\x86\x74\x0b\x1e\xb6\xe2\xb4\x7e\x09\x24\x08\x44\x43\x06\x67\x44\xd3\xa0\xae\xc9\xe2\xea\xc3\xbb\x18\xc1\x12\x3a\xc4\x84\x9a\x09\x33\x62\xcd\xfe\xc2\x21\xe8\x6b\xe9\xee\x6d\x18\x05\xc7\xbe\x42\x98\xd7\x4c\x22\x9c\x1a\x6d\xb1\x09\x4d\x8d\x75\xb6\x49\x3b\xda\x44\x38\xae\xca\x66\x9b\x79\xed\x5d\xb7\xc9\x3a\xd8\xcc\x8c\xb6\xda\x24\xa4\xb3\x4d\xbd\xab\xcd\xf6\x38\xd1\x47\xb0\x35\x3a\xdb\x84\x6d\x71\x22\x13\x76\x8f\x53\x36\x80\x2b\x46\x73\x9b\x6d\x85\xcb\x4d\xdc\x66\xb4\xaf\x76\x8d\x0e\x41\x5e\xb3\x87\xf4\x82\x81\x5a\x82\xbc\x24\x98\xc5\xdc\x9e\x25\xb3\x58\x36\x3e\x25\xbc\x22\x9f\xec\x9d\x08\xb7\xc9\x63\x4c\x19\xc9\xc5\x5f\x59\xc8\x38\x24\x5b\xc8\x09\x24\x5b\xb8\x4f\x2e\xe2\xe9\x5c\x76\xb2\xe4\x15\xbb\x4a\x14\xb2\x97\xf4\x1f\xc5\x31\x08\xa5\xa3\x3b\xf9\xf0\xcf\x55\xb8\x17\xc7\xf7\xdb\xd7\x30\x5a\xbf\x04\xfb\x3b\x3f\x28\x22\x86\xb7\x08\x02\xc8\x4c\x4d\x33\x91\x51\x89\x38\xf9\xab\xa9\xfd\xa2\xef\x85\xbb\x83\x94\x8e\xc2\xdd\xa1\xa3\x5e\x82\xaf\xe8\xd5\x13\x47\x0f\x3f\x02\xa4\x25\x7d\x28\xd6\x2e\xfe\x0c\x36\xf2\x5f\x55\x2f\x97\x3d\x82\x68\xa6\x56\xa5\xb2\x34\x4f\x6a\xcb\x48\xf5\x56\x9b\x85\xa6\xcb\x29\x09\x42\x13\xc2\x06\x1d\x97\xa9\x95\x98\x5b\xe7\xe8\x25\x49\xaf\x7c\x52\x27\xe4\x6c\xed\x31\xbe\xf9\x17\xef\xf1\xc8\x5c\x1e\x80\x8d\x21\x88\x93\xf4\x26\x4e\xa7\x3f\x0f\x47\xbf\x9f\xf8\x0b\xb4\xff\x21\x82\x11\x83\x88\x60\x88\x35\x44\xb8\xce\x29\x59\x71\x83\x53\x0e\x99\x4e\x38\xc3\x28\xe0\x90\x30\xb6\xc1\x94\x30\x06\x89\xcf\x11\xc5\x14\x53\x81\x02\xaa\x33\x14\x7f\x27\x9c\x32\x46\x28\xa1\x94\x63\xc2\x28\x09\x18\xa7\x1a\x5b\x63\x83\x08\x2a\xc8\x1a\xeb\xdc\xc0\x1a\x46\x54\x63\x94\x08\xcc\x09\xc1\x94\x62\xf5\xb4\xc6\x59\xbe\xe6\x1a\xc5\x1c\x13\x5f\x3a\x86\x29\x21\x94\x10\x9d\x32\x66\x70\x4e\x30\xdb\x60\x83\xf9\x5c\x60\xe9\xfc\x86\x1b\x28\x90\x6e\x72\x82\x75\x8a\x18\xa6\x10\x43\xe9\x3b\xd6\x08\x25\x1b\xc6\x29\xa2\x8c\xe8\x5c\x67\x2b\xb6\x21\x98\x53\x4c\x30\x65\x94\x09\x62\x70\xc4\x0d\xb6\xc6\x4c\x3d\xd8\x71\xa1\x5c\x73\x8d\xe8\xcc\xe7\x9c\x42\xe2\xc7\x68\xe8\x64\xcd\x08\xda\x50\x44\x18\xd1\x51\x40\x0d\xe2\x13\xc2\x21\x63\x98\xa1\x80\xe8\x1c\x33\x1d\x43\xe2\x63\x83\x19\x18\x13\xca\x09\x33\x08\x25\x9c\x71\xcc\xc9\x1a\x63\xc2\xc9\x8a\x8b\xf8\x9b\xce\x20\x5b\x63\x9d\x4a\x84\x7d\x8c\x29\xbf\x98\x19\xb7\xbe\x78\xcb\x67\x8f\xff\x07\x00\x00\xff\xff\x29\xc5\x69\xb1\xfe\x1d\x00\x00")

func resources001_initial_dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_resources001_initial_dbSql,
		"resources/001_initial_db.sql",
	)
}

func resources001_initial_dbSql() (*asset, error) {
	bytes, err := resources001_initial_dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/001_initial_db.sql", size: 7678, mode: os.FileMode(436), modTime: time.Unix(1515243023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/001_initial_db.sql": resources001_initial_dbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"001_initial_db.sql": &bintree{resources001_initial_dbSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

