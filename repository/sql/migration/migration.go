// Code generated by go-bindata.
// sources:
// repository/sql/migration/resources/001_initial_db.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resources001_initial_dbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdf\x6f\xa3\x38\x10\x7e\xe7\xaf\x98\xb7\x26\xba\xac\xb4\x54\x5b\xe9\x4e\xab\x7d\x70\x88\xdb\x43\x4b\x4c\x8f\x98\xd3\xf6\xc9\x72\x02\xed\xa2\x24\x90\x03\x67\x75\xfd\xef\x57\x36\x18\xcc\x8f\x24\xa4\x2d\x4f\x89\x99\xb1\x67\xbe\xf9\xe6\x1b\xf3\xe9\x13\xfc\xb1\x4f\x5e\x72\x2e\x62\x08\x0f\x96\xe5\x04\x18\x51\x0c\x14\xcd\x3d\x0c\xee\x3d\x10\x9f\x02\xfe\xe1\xae\xe8\x0a\x36\x5c\xc4\x2f\x59\x9e\xc4\x05\x4c\x2c\xd0\x7f\x5f\x59\x12\x81\x4b\xe8\xc4\xb6\xa7\x00\xa0\x1c\x48\xe8\x79\x00\x28\xa4\x3e\x73\x89\x13\xe0\x25\x26\x74\x66\x01\xa4\x7c\x1f\x43\xf5\x0c\xb8\x48\x93\x5f\x49\x91\xac\x77\xa5\x15\x75\xc9\x93\x32\x9b\x1a\xbb\x2e\xf0\x3d\x0a\x3d\x0a\x37\xf6\x8d\xb4\xe7\x1b\x91\xfc\xaa\x36\x3d\x6f\xff\x59\xd9\x27\x05\xcb\xb3\x4c\x8c\xde\xff\x31\x70\x97\x28\x78\x82\xef\xf8\x09\x26\x46\xca\x53\x6b\x6a\x01\x60\xf2\xe0\x12\x0c\xdf\xc0\x4d\xd3\x6c\x31\xb7\x1a\x77\xe7\x6f\x14\xac\x30\x85\x6f\x70\x14\xcf\x7f\xee\xd7\x5f\xbe\x8e\xc1\xf6\x95\x1d\x78\x1e\xa7\x82\xed\xf9\xa1\x06\x39\x7b\x29\x41\xee\x00\x77\x0e\xe8\x6a\x97\xa1\x12\x99\x60\xf7\x92\xab\x8e\x9a\x0d\x6c\xf0\xc1\x09\x8b\x9c\xa7\x85\x2c\x5e\x96\x96\x74\x3a\xf0\xd7\xbd\x3c\xb2\xcd\xa6\x36\xa3\xcc\xa7\x9f\xf4\xb1\x88\xf3\x0a\xa7\x13\x3b\x48\xab\xd5\xf7\x50\x83\xd9\xb5\xd2\x14\xe4\xbb\x63\xc5\xa8\x05\x76\xdc\x25\xf2\x26\xf6\xdd\x0c\x6e\xdb\xd8\x09\xfe\xa2\x1d\xff\x45\x81\xcc\x7e\x72\x7b\x77\x37\x85\x53\x8f\xc6\x49\xfb\xf3\x28\x8a\x23\xc6\x85\xe2\xe1\x12\xaf\x28\x5a\x3e\x9e\xcb\xb7\xc6\x39\x0c\x02\x4c\x28\xab\x9d\x54\xea\x87\x88\x8b\x72\xbb\xee\x66\xbd\x8d\x86\x82\x69\x11\xa1\xa9\xc4\x54\xbe\x73\xc9\x02\xff\x80\x49\x85\xee\xbb\x69\x70\xc8\xb3\xe8\xb8\x11\x85\xa5\x8a\x5e\xfe\x69\xaa\xd6\x29\xab\x25\x97\x8d\xe0\x3a\x05\xac\x7c\x2e\x3c\x66\xd5\x4c\x05\x1a\x55\x38\xd3\xf9\x81\xba\xa4\x79\xa3\x3c\xed\x2f\xa7\x2b\xde\x30\xea\x90\x27\x9b\xd8\x00\xbf\x45\xaa\x4b\xa7\x1a\x44\x91\xce\x88\x62\x59\xe2\xd3\x7c\x68\x39\x47\xf1\x2e\x16\xb5\x7b\xed\x7c\x39\xe4\xa4\x60\x86\x14\xcf\x5d\x5a\x1f\xb8\xbe\xb1\x6f\x2e\x84\xfc\xdf\x91\xa7\x22\x11\xaf\xe3\xf3\xed\x38\xb2\x63\x9a\x88\x51\xe5\x09\x3d\xef\x04\x23\xcf\x30\xb1\xa4\xb4\x66\x22\x53\x8c\x4a\xa3\xf8\x7f\x0b\xc0\x27\xf5\x3a\x4c\x4a\xaa\x4d\xbf\x5a\x67\xa5\x4c\x93\xb8\x16\x4b\x2d\xde\x26\xbb\xc7\xa8\xf6\x55\x72\xdd\x6c\x3e\x83\x8f\x94\xe9\x42\x64\x9b\xad\x6a\x4e\xf5\x4b\x07\x7f\x55\x63\x8e\x68\xca\x56\x62\x8d\x72\x8f\xf2\xec\xb1\xec\xda\xf3\x78\xa4\x7b\xaa\xe9\x9a\x71\xfd\xe4\xf8\x64\x45\x03\x24\x0f\x2c\xe1\x69\x91\xe8\x79\x6b\x01\xdc\xfb\x01\x76\x1f\x48\x59\xa5\x8a\x41\x10\xe0\x7b\x1c\x60\xe2\xe0\x55\x9f\x5e\x0a\x4b\x9f\x40\xf8\x28\xfb\x13\x1c\xb4\x72\xd0\x02\xeb\xd5\x05\xf6\x70\xb3\x3a\x18\x43\xb2\x7e\xde\x32\xbb\x7b\xb4\x16\x6c\xf3\x6c\xb9\x56\x18\x5a\xde\x3e\x59\xf2\x42\x35\x54\xfb\xe8\x7a\xf9\x8d\x7d\x76\x0a\x28\x9f\x94\xaf\xcc\x3e\x1b\x70\xac\xb3\x6b\xec\x75\xfc\x5d\xee\xaa\xf4\x14\x77\xdb\x77\x81\x11\xe4\x35\x06\x83\x96\x1d\xfb\x2f\x7b\xcc\x54\x88\xf7\x3c\xd9\x8d\xf7\xac\xbc\x36\x79\xac\x27\xf6\x95\x92\x6e\xcc\xfa\xeb\xf4\x7c\xbd\xcb\x36\xdb\x38\xea\x88\xf9\xe7\x4b\x62\x9e\x14\x8c\x47\xfb\x24\xed\x8d\x81\x8b\x9e\x06\x51\x55\x65\x98\x04\x99\x1d\xb5\xd4\x86\xc4\xfd\x27\xc4\x30\x91\xab\xa7\x64\xeb\xca\x5b\xa5\x2a\x3b\x3f\x8a\x9f\xe5\x9d\xb2\xfe\xdb\xbb\x55\x9e\x93\x61\x83\x3b\x30\xec\x25\xad\xf6\xb1\xf8\x99\x45\x1d\xca\xa8\x49\xd5\xfa\x9c\x69\xee\x92\xe5\xf7\xc6\xdc\xf3\xe7\x3d\x2d\x37\xe3\x7c\x8b\x80\x23\x8f\xe2\xa0\x02\xc4\xbc\x58\x5b\x00\x68\xb1\x30\xeb\xf0\xbc\x65\xa6\x01\x2b\x05\xe1\x0d\xba\xd1\xc8\x03\xf1\x01\x39\xd4\xf5\x89\x65\x6a\x49\xbd\xda\x09\x6f\x68\x58\xf6\xc3\x1c\xb2\xaa\x84\xa0\x1d\xac\x39\xf9\xcc\x80\xcd\x6f\xd5\xd6\x74\x1c\xd0\x54\x6b\x40\x7d\x67\xd7\xc4\x74\xdb\x8e\xa9\x99\xcc\x27\x74\xdf\x30\x18\x1b\x4f\x07\xc5\x72\x48\xf7\x42\x34\x05\xf3\x7d\x45\x35\x46\x41\x7f\x3e\x0c\x80\x63\x9c\x7c\x7b\xc5\x04\x7c\x3f\x12\x4d\xc7\x0f\x92\xbd\x79\xad\x7e\xbe\x0f\x94\x73\x51\xfd\x0e\x00\x00\xff\xff\x3d\x82\xa4\x05\x48\x11\x00\x00")

func resources001_initial_dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_resources001_initial_dbSql,
		"resources/001_initial_db.sql",
	)
}

func resources001_initial_dbSql() (*asset, error) {
	bytes, err := resources001_initial_dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/001_initial_db.sql", size: 4424, mode: os.FileMode(420), modTime: time.Unix(1517946750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/001_initial_db.sql": resources001_initial_dbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"001_initial_db.sql": &bintree{resources001_initial_dbSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

