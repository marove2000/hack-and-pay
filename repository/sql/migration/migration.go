// Code generated by go-bindata.
// sources:
// repository/sql/migration/resources/001_initial_db.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resources001_initial_dbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdf\x6f\xa3\x38\x10\x7e\xe7\xaf\x98\xb7\x12\x5d\x56\x5a\xaa\xad\x74\xa7\xd5\x3e\x10\xe2\xf6\xd0\x12\xd3\x23\xe6\xb4\x7d\x42\x4e\xa0\x5d\x94\x04\x72\xc1\x59\x5d\xff\xfb\x95\xcd\x2f\x1b\x4c\x02\x6d\x79\x4a\x8c\xc7\x33\xf3\xcd\x37\xdf\x98\x4f\x9f\xe0\x8f\x43\xfa\x72\xa2\x2c\x81\xf0\x68\x18\x4e\x80\x6c\x82\x80\xd8\x0b\x0f\x81\x7b\x0f\xd8\x27\x80\x7e\xb8\x6b\xb2\x86\x2d\x65\xc9\x4b\x7e\x4a\x93\x02\x4c\x03\xea\xbf\xaf\x51\x1a\x83\x8b\x89\x69\x59\x33\x00\x10\x06\x38\xf4\x3c\x00\x3b\x24\x7e\xe4\x62\x27\x40\x2b\x84\xc9\xdc\x00\xc8\xe8\x21\x81\xea\xd1\x98\xf0\x2d\xbf\xd2\x22\xdd\xec\xcb\x5d\xc4\xc5\x4f\x62\xdb\x4c\x3a\x75\x89\xee\xed\xd0\x23\x70\x63\xdd\xf0\xfd\x74\xcb\xd2\x5f\xd5\xa1\x97\xf7\x7f\x16\xfb\xd3\x22\x3a\xe5\x39\x1b\x7d\xfe\x63\xe0\xae\xec\xe0\x09\xbe\xa3\x27\x30\xa5\x94\x67\xc6\xcc\x00\x40\xf8\xc1\xc5\x08\xbe\x81\x9b\x65\xf9\x72\x61\xb4\xe6\xce\xdf\x76\xb0\x46\x04\xbe\xc1\x99\x3d\xff\x79\xd8\x7c\xf9\x3a\x06\xdb\xd7\xe8\x48\x4f\x49\xc6\xa2\x03\x3d\x36\x20\xe7\x2f\x25\xc8\x1d\xe0\x2e\x01\x5d\x9d\xa2\x2b\x91\x0c\x76\x2f\xb9\xca\xd5\x5c\x73\xc0\x07\x27\xcc\x4e\x34\x2b\x78\xf1\xf2\xac\xa4\xd3\x91\xbe\x1e\xb8\x4b\x95\x4d\x2a\xa3\xe4\xa7\x9f\xf4\xb9\x48\x4e\x15\x4e\x03\x27\x08\x68\x4e\x79\x7c\xde\x6a\xfd\xd4\x14\xa4\xfb\x73\xc5\xa8\x25\x72\xdc\x95\xed\x99\xd6\xdd\x1c\x6e\x55\xec\x18\x7d\xa9\x0d\xff\xb5\x03\x9e\xbd\x79\x7b\x77\x37\x83\xa1\xa7\xc6\xa9\xb6\xa7\x71\x9c\xc4\x11\x65\x82\x87\x2b\xb4\x26\xf6\xea\xf1\x52\xbe\x0d\xce\x61\x10\x20\x4c\xa2\xc6\x48\xa4\x7e\x8c\x29\x2b\x8f\xeb\x1e\xd6\x3b\x48\x17\x8c\x42\x84\xb6\x12\x33\xfe\xce\xc5\x4b\xf4\x03\xcc\x0a\xdd\x77\xd3\xa0\xc2\xbf\x30\x4c\xb5\x18\x65\xd5\x3a\x65\x35\xf8\xb2\x14\x1c\x8f\x67\xfd\x3d\x54\xbb\x61\x10\x72\x4d\xf5\x65\x05\x1a\x55\x38\xd9\xf8\x81\xb8\xb8\x7d\x23\x2c\xad\x2f\xc3\x15\x07\x89\x73\xe9\x36\x91\xc0\x57\x48\x75\xcd\xab\x44\x14\x6e\x6c\x13\xc4\x4b\x3c\xcc\x07\xc5\x38\x4e\xf6\x09\x6b\xcc\x1b\xe3\xeb\x21\xa7\x45\x24\x49\xf1\xc2\x25\x8d\xc3\xcd\x8d\x75\x73\x25\xe4\xff\xce\x34\x63\x29\x7b\x1d\x9f\x6f\xc7\x30\x3a\x67\x29\x1b\x55\x9e\xd0\xf3\x06\x18\x79\x81\x89\x25\xa5\x6b\x26\x46\x82\x51\x59\x9c\xfc\x6f\x00\xf8\xb8\x59\x07\xb3\xa4\xda\xec\xab\x71\x51\xca\x6a\x12\x37\x62\x59\x8b\xb7\xcc\xee\x31\xaa\x3d\x49\xae\xdb\xc3\xe7\xf0\x91\x32\x5d\xb0\x7c\xbb\x13\xcd\x29\x7e\xd5\xc1\x4f\x6a\xcc\x11\x4d\xa9\x24\xd6\x2a\xf7\x28\xcb\x1e\xcb\xa6\xfa\xa3\x71\xdd\x53\x6d\xd7\x8c\xeb\x27\xc7\xc7\x6b\x12\xd8\xdc\x61\x09\x8f\x42\xa2\xe7\x9d\x01\x70\xef\x07\xc8\x7d\xc0\x65\x95\x2a\x06\x41\x80\xee\x51\x80\xb0\x83\xd6\x7d\x7a\x09\x2c\x7d\x0c\xe1\x23\xef\x4f\x70\xec\xb5\x63\x2f\x51\xbd\xba\x44\x1e\x6a\x57\xb5\x31\xa4\x9b\xe7\x5d\x64\x75\x5d\xd7\x82\x2d\xfb\xe6\x6b\x85\xa4\xe5\xaa\x67\xce\x0b\xd1\x50\xaa\xeb\x66\xf9\x8d\x7d\x36\x04\x94\x8f\xcb\x57\x72\x9f\x69\x0c\x9b\xec\xda\xfd\x75\xfc\x5d\xee\x8a\xf4\x04\x77\xd5\xbb\xc0\x08\xf2\x4a\x83\xa1\x96\x1d\xeb\x2f\x6b\xcc\x54\x48\x0e\x34\xdd\x8f\xb7\xac\xac\xb6\xa7\xa4\x9e\xd8\x13\x25\x5d\x9a\xf5\xd3\xf4\x7c\xb3\xcf\xb7\xbb\x24\xee\x88\xf9\xe7\x6b\x62\x9e\x16\x11\x8d\x0f\x69\xd6\x1b\x03\x57\x2d\x25\xa2\x8a\xca\x44\x1c\xe4\xe8\x5c\x4b\x6d\x88\xdd\x7f\x42\x04\x26\x5f\x1d\x92\xad\x89\xb7\x4a\x51\x76\x7a\x66\x3f\xcb\x3b\x65\xf3\xb7\x77\xdb\xbb\x24\xc3\x12\x77\x40\x6f\xc5\x77\x1d\x12\xf6\x33\x8f\x3b\x94\x11\x93\x4a\xf9\x9c\x69\xef\x92\xe5\xf7\xc6\xc2\xf3\x17\x3d\x2d\x97\xe3\x7c\x8b\x80\xdb\x1e\x41\x41\x05\x88\x7c\xb1\x36\x00\xec\xe5\x52\xae\xc3\xf3\x2e\x92\x37\x44\xa5\x20\xbc\x41\x37\x5a\x79\xc0\x3e\xd8\x0e\x71\x7d\x6c\xc8\x5a\xd2\xac\xce\xaf\x07\xd1\x28\xa2\x12\x47\x3b\xe0\x06\xe4\x53\xda\x30\x25\xa0\x0e\x5e\xba\xe9\xdd\x0f\x59\xb7\xab\x52\x26\x35\x6a\x79\x14\xcb\x61\xcb\x1f\xcf\xca\xb8\xd6\x88\xbc\xa1\x19\x07\x1a\x18\x87\x63\xba\xfd\x20\x24\x2f\xc4\xd3\x41\xb1\xbc\x35\xf4\x42\x94\x15\xfc\x7d\x2c\x93\x66\x53\x7f\x60\x69\xc0\x91\x3c\xdf\x4e\x18\xc9\xef\x47\xa2\x95\x20\x2d\xf1\xdb\xd7\xe2\xe7\xfb\x40\xb9\x14\xd5\xef\x00\x00\x00\xff\xff\xd3\x80\x0e\xca\xd9\x11\x00\x00")

func resources001_initial_dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_resources001_initial_dbSql,
		"resources/001_initial_db.sql",
	)
}

func resources001_initial_dbSql() (*asset, error) {
	bytes, err := resources001_initial_dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/001_initial_db.sql", size: 4569, mode: os.FileMode(436), modTime: time.Unix(1517470984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/001_initial_db.sql": resources001_initial_dbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"001_initial_db.sql": &bintree{resources001_initial_dbSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

