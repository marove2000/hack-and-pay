// Code generated by go-bindata.
// sources:
// repository/sql/migration/resources/001_initial_db.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resources001_initial_dbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5d\x73\xa3\x36\x14\x7d\xe7\x57\xdc\xb7\xb5\xa7\xd9\xce\x3a\xb3\x99\x69\xa7\xb3\x0f\x18\x94\x94\x59\x5b\xa4\x58\x74\x9a\x27\xad\x6c\x70\x96\xb1\x0d\x2e\x88\x4c\xf3\xef\x3b\xe2\x53\x02\x11\x83\xd3\xae\x9f\x6c\x49\x47\xdc\x8f\x73\x8e\x2f\x1f\x3f\xc2\x4f\xa7\xe8\x39\x65\x3c\x04\xff\x6c\x58\x1e\x32\x09\x02\x62\x2e\x57\x08\x76\x8c\x87\xcf\x49\x1a\x85\x99\x31\x33\xa0\xfe\xf9\x4a\xa3\x00\x1c\x4c\xc0\xf4\x89\x4b\x1d\x6c\x79\x68\x8d\x30\x31\x00\x00\x1e\x3d\x67\x6d\x7a\x4f\xf0\x15\x3d\xdd\x18\x00\x31\x3b\x85\x50\x7d\x04\x42\xf3\xc1\x2e\x01\xec\xaf\x56\xe2\xf8\x4b\x94\x45\xdb\x63\x89\x20\x0e\x7e\x72\x30\x99\x2d\xe6\x60\xa3\x7b\xd3\x5f\x11\xf8\xb0\xf8\xa0\x1c\x67\x3b\x1e\xbd\x54\xf7\xeb\x8e\x7f\x52\x8f\x47\x19\x4d\x93\x84\x8f\xb9\xdd\x98\x1b\x00\x08\x3f\x38\x18\xc1\x17\x70\xe2\x38\xb1\x97\x06\x80\xf5\xbb\xe9\x6d\x10\x81\x2f\x90\xf3\xfd\x2f\xa7\xed\xe7\xdf\x0c\x6d\xc1\x5e\xe9\x99\xa5\x61\xcc\xe9\x89\x9d\x9b\xca\x25\xcf\x65\xe5\xa4\x72\xa8\x05\x14\x31\x56\xb8\x6e\xa5\xe5\x34\xa4\x12\xc3\x4c\xba\xf8\x46\x03\x9e\x5f\x9b\xc8\x39\x4d\x82\x7c\x27\xdd\x55\x67\x52\x6f\x88\x44\xf4\x29\x8c\x8e\xbd\xbd\xea\x46\x06\xcd\xc5\x41\xcb\xc5\x1b\xe2\x99\x02\xaf\x0b\x85\x46\xdb\xfd\x81\x2e\x0c\x80\x7b\xd7\x43\xce\x03\x6e\xab\x51\xdf\x02\x1e\xba\x47\x1e\xc2\x16\xda\x48\x3c\x56\xcf\x14\x94\x75\x31\xf8\x8f\xb6\x48\xdd\x32\x37\x96\x69\xa3\x7a\xd5\x46\x2b\x24\xad\x4e\xae\xa4\x83\x6d\xf4\xd7\x85\xf0\x5d\xac\x3d\xa0\x86\x39\xd0\x9c\xac\xd7\x10\x5d\x4b\x74\xb2\xdc\x7c\xf5\x3b\x4c\xbc\xf0\x91\x7b\x28\x6b\x1a\xe0\x4f\xd3\x13\x25\x98\xdd\xde\xdd\xcd\x47\x80\x1f\x88\x83\xdb\x9d\x02\xb9\xf8\x3c\x04\x2c\xc0\x15\xf0\x9c\x46\xbb\xf6\xb1\x36\xb2\x9c\xb5\xb9\x9a\x2d\xee\x6e\xe0\x56\x0f\x57\x8c\x22\x08\xc2\x80\x32\x5e\x81\x4d\x82\x88\xb3\x46\x8d\xf2\x2d\xdf\xf3\x10\x26\x54\x2c\x6e\x88\xb9\x7e\x54\xc0\x41\x78\x0c\x79\x03\x6f\xc0\x97\x43\x8e\x32\x2a\x19\xda\xd2\x21\xcd\x03\xb7\xc2\x6b\xde\x0e\xf9\xef\x9c\xc5\x3c\xe2\xaf\xfd\x7c\x07\xca\xd5\x05\xd2\x3c\x8e\xf8\xa8\xf6\x5c\xe5\x77\x0a\xb9\x33\x5a\x30\x2a\x0e\xc2\x7f\x14\x4e\x67\x30\x2b\xa9\x26\x28\x6c\xae\x08\xf2\xde\xb2\x17\x00\xd3\xb6\xc7\x29\xff\xd6\x50\x74\xdf\x6a\x40\x91\x7d\x1b\x85\x74\xc0\xd0\x2b\xbe\xa7\xf7\xae\xe8\x32\x9e\xec\x0e\x85\xe2\x8a\x6f\x03\x06\xf8\xb6\xda\x46\x28\x4d\x21\x41\x9e\x85\x69\x09\x1d\x85\xec\x51\x67\xea\xf3\x58\x50\x0b\xa5\x95\xc2\x38\x91\x48\x5d\x2b\xcb\xa3\x30\x63\x7f\xe8\x3a\x75\x45\x0b\x7d\xb7\xaa\xcd\x1f\xe1\xce\x43\xc1\xba\xb8\xdc\x92\x09\xac\x01\xca\x3e\x5e\x9d\xaf\x7a\xd6\x33\x6d\x9e\xb2\x38\x13\x13\x4b\x12\x97\xc6\x2d\x2d\x8c\x1f\xa8\x5a\x46\xc0\x68\x42\x55\x2d\x52\x4d\x7f\x12\xf4\x85\x1d\x73\xc9\xf3\x47\xb8\xaf\x42\x0e\xce\x9e\xe5\xad\x11\x9e\x34\xe0\xdc\x93\x69\x99\x9f\x03\xd6\x7a\xb7\x04\xbf\x9c\xb3\xc4\xe8\x6f\x72\xef\x68\xcd\x96\x9f\xcb\x82\xd2\xfd\xe1\xdb\xff\xc6\x6e\xc1\xdd\xf7\xf8\x73\x45\x97\x92\xa0\x72\x16\x3a\x9e\x96\x90\x31\xc9\xf6\x2e\xeb\x89\xa4\xe4\x7c\xf1\x0c\x96\xf3\xef\x25\xe3\x9b\x9f\x57\xf2\x5d\xa1\xac\xdc\xe6\x53\xc8\xbf\x27\x81\x8e\x5e\xca\xdb\x85\xcc\x62\xf1\x02\xb0\x5c\xb9\xcb\xa6\xe7\xd7\x96\x78\x7f\xa0\x6d\x9a\xc5\xd7\xb2\x40\xed\xe2\xb0\x27\x88\x75\xa9\x34\x53\x46\x38\x69\x0a\xab\x13\x5e\xfc\xba\x18\x33\x82\x85\x27\x16\x1d\xc7\x23\x2b\xd4\x2e\x0d\x6b\x25\x4d\x9c\x9f\x24\x0d\x4e\x1b\x9e\xb6\xc7\x64\x77\x08\x83\xce\xe4\xf4\xe9\xd2\xe4\x14\x65\x94\x05\xa7\x28\xee\xcd\x5c\x17\x91\x92\xe4\x8b\xce\x50\x51\x64\x9a\xd7\x73\x8d\x8f\x9d\x3f\x7c\x04\x33\xb1\x3a\xe5\xc5\x4a\x1e\x7c\xca\x29\xa2\x37\xe9\x28\xff\x26\x8a\x95\xd4\xd4\x91\xbd\xa4\x08\xae\xdd\x52\x26\x9a\xc6\x31\x74\x36\xd2\x09\x46\xf9\x4b\xea\xc5\xb4\x3f\x50\xc5\x0a\x4a\xb2\xbe\x2b\x38\xdd\xb8\x35\x10\x9b\x64\x1d\xba\xc8\xba\x92\xfb\xcf\xc3\x6a\xa6\xc0\x7f\x03\x00\x00\xff\xff\x2c\x05\x83\x39\x20\x11\x00\x00")

func resources001_initial_dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_resources001_initial_dbSql,
		"resources/001_initial_db.sql",
	)
}

func resources001_initial_dbSql() (*asset, error) {
	bytes, err := resources001_initial_dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/001_initial_db.sql", size: 4384, mode: os.FileMode(420), modTime: time.Unix(1518378895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/001_initial_db.sql": resources001_initial_dbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"001_initial_db.sql": &bintree{resources001_initial_dbSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

