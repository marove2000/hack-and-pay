// Code generated by go-bindata.
// sources:
// repository/sql/migration/resources/001_initial_db.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resources001_initial_dbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5b\x6f\xa3\x48\x16\x7e\xf7\xaf\x28\xa9\x1f\x6c\x6b\x9d\x16\x75\x07\x46\x23\x2d\xb1\x49\x2f\x1a\x07\x67\x6c\xdc\x9a\x7e\xb2\xca\x06\x27\x28\xbe\x64\x6d\xdc\x33\xf9\xf7\xab\xe2\x5a\x60\xc0\x64\xba\x67\x91\xe2\x86\xa2\xce\xed\x3b\xa7\xbe\x73\xe8\xbb\x3b\xf0\xaf\x7d\xf8\x7c\x12\x51\x00\x96\x6f\xbd\xde\x78\x6e\x5b\x9e\x0d\x3c\xeb\x7e\x6a\x03\xe7\x01\xb8\x33\x0f\xd8\x7f\x38\x0b\x6f\x01\x36\x22\x0a\x9e\x8f\xa7\x30\x38\x83\x41\x0f\x64\x8f\xef\xab\xd0\x07\x8e\xeb\x0d\x20\x1c\x02\x00\x62\x01\x77\x39\x9d\x02\x60\x2d\xbd\xd9\xca\x71\xc7\x73\xfb\xd1\x76\xbd\x51\x0f\x80\x83\xd8\x07\x20\xbd\x6a\x44\xe4\x96\xef\xe1\x39\x5c\xef\x92\x5d\x9e\xe3\x7e\x8b\xb7\x0d\x15\xad\x13\xfb\xc1\x5a\x4e\x3d\xd0\x87\x7d\xb9\x5f\x6c\xa2\xf0\x7b\xaa\xb4\x7d\xbf\x16\xef\x0f\xcf\xab\xd3\xf1\x18\x75\xd6\xff\x34\x77\x1e\xad\xf9\x37\xf0\x9b\xfd\x0d\x0c\x94\x90\x87\xbd\x61\x0f\x00\xdb\xfd\xe2\xb8\x36\xf8\x15\x38\x87\xc3\x71\x72\xdf\x2b\xc4\xc7\xff\xb1\xe6\x0b\xdb\x03\xbf\x82\x4b\xb4\xd5\xf7\x6b\xf2\x4b\x17\x6c\xdf\x57\x6f\xe2\x14\x1c\xa2\xd5\x5e\xbc\xe5\x20\x1f\x9f\x13\x90\x2b\xc0\xb5\x01\x9d\x6a\xa9\x4b\x91\x0a\xf6\x55\x70\xa9\xa9\x51\x8d\x82\x9f\x1c\x70\x74\x12\x87\xb3\x4c\xde\xf1\x90\x94\xd3\x9b\x78\xdf\x4b\x93\xe5\x6a\x2a\x57\x94\x7a\x5d\x07\x7d\x39\x07\xa7\x14\xa7\x06\x0d\x31\x34\xa7\xa3\x7f\xd9\xd4\xda\xc9\x4a\x50\xec\x2e\x69\x45\x4d\xec\xb1\xf3\x68\x4d\x07\x90\x8e\x00\x2a\x63\x17\x89\xe7\x4c\xf0\xab\x35\x97\xd1\x0f\x10\xa5\x43\xd0\x74\x65\x38\x65\xf2\xc2\xf7\x03\x7f\x25\xa2\xb8\x0e\x1f\xed\x85\x67\x3d\x3e\xb5\xc5\x9b\xe3\xbc\x9c\xcf\x6d\xd7\x5b\xe5\x42\x71\xe8\x6f\xbe\x88\x12\x75\x55\x65\x57\x8a\xea\x9c\x29\x15\x42\x91\x89\xa1\x7c\xe7\xb8\x13\xfb\x0f\x30\x48\xd1\xfd\xc9\x65\x90\x66\x23\x2d\x81\x22\x35\xcd\x39\xbc\x55\x05\x8b\xdf\x96\xca\xfb\x96\x42\x50\xc9\xe8\x2a\x87\xea\xc6\x2f\x9e\xe3\x16\x1b\xe3\x5d\x90\x34\x27\xba\x0e\xdf\xb7\x53\xb8\x09\x94\xb7\x8d\x55\xa5\x54\x85\xdc\x68\x79\xb6\xcc\x67\x2b\x04\xad\x85\xe1\x07\xbb\x20\xca\x35\x56\xf4\x75\xf3\x3d\x3c\xaf\x14\x52\x56\x38\xf3\xb6\x4b\x29\x87\xfe\xf7\x22\x0e\x51\x18\xbd\xd7\x46\xdf\xcd\x89\x4c\xc5\xea\x72\x08\xa3\xbf\x77\xe0\xca\x35\x9e\x97\xda\x3f\x53\xd0\x05\x73\x66\x4c\xae\x16\x77\x17\x0a\xff\x10\x77\x17\xca\x47\xe0\x9f\xe3\xec\x73\x74\xdc\xbc\xc6\xc1\xc4\x77\xc9\x39\x2d\x4e\x58\x6b\x43\xaa\x63\x5d\x35\x9c\x66\xf2\x6e\xad\x87\x5a\x07\xd2\x83\x94\x9d\xa4\x82\x11\xaf\xbb\x7c\xed\xa1\x29\x41\x9b\x85\xfa\xc3\x58\xca\x08\xcf\xbd\xc1\x55\xac\x15\xb4\x7a\x72\x59\xf1\xa0\x42\x55\x59\xe9\x43\x03\x36\x95\xbe\x0a\x43\xb0\x17\xe1\xae\xbb\x64\x2a\xb5\x39\x05\x59\x3b\xc9\x29\xa3\x11\xb1\x72\x1a\x8b\x46\xd4\x81\x6c\x32\x29\x85\xa5\x3e\x20\xb5\xde\x1d\x37\xaf\xb5\x4d\xaf\x4d\x2a\x3c\xaf\x84\xbf\x0f\x0f\x65\x2e\x53\xa6\xc4\x46\x2c\xc7\x33\x77\xe1\xcd\x2d\x99\xb2\x38\x97\x2b\x99\x96\xd5\x25\x3c\xf8\xc1\x5f\x3d\x00\x96\xae\xf3\xfb\xd2\x06\x03\xb9\xda\x54\x2c\x75\x45\xd2\x76\xe2\xe2\x4a\x11\x97\xe8\x25\x69\x90\xf9\xe3\xd5\xf4\xd2\x76\xf6\x94\x72\x03\xf5\x52\x72\xd7\x3e\x88\x5e\x8e\xd9\x90\x59\x22\xd8\xd2\x78\x5e\xcc\x46\x09\x7e\xf7\xd3\xd9\xfd\xd5\x99\x51\xfd\xfc\x3b\xe7\xc6\x9a\x7a\xf6\x3c\x05\x44\x1d\x14\x7b\x00\x58\x93\x89\x9a\x88\xed\xeb\x4a\xdd\xb0\x8a\x13\x03\x1e\x66\x73\xdb\xf9\xe2\x2a\xce\x84\xfe\x10\xcc\xed\x07\x7b\x6e\xbb\x63\x3b\xc1\xf5\xac\xcc\x34\x00\xcc\x5c\x30\xb1\xa7\xb6\x67\x03\x77\x06\xac\xb1\xe7\xcc\xdc\x64\x75\xf9\x24\x4b\xb2\x58\x1d\xdd\x76\x22\x1f\x6a\x4a\x7e\x28\x2d\x47\x75\xa5\x98\x80\xd4\x9e\xf4\x01\x87\x2a\x78\xd5\x35\xa0\x6b\x97\xeb\x76\xad\xc2\xf5\xf6\x75\x05\xcb\x5e\xab\xdd\x44\x75\x5b\xfd\x18\x2c\x75\x1c\xd5\xf3\xb1\xb5\x18\x5b\x13\xbb\xe4\x77\xba\x56\x03\x63\xb3\x4f\xe8\x27\x21\xd9\xe2\x4f\x05\xc5\x98\xf5\xaf\x5d\x4c\x9b\x41\x0d\x4e\x1f\xad\x32\x59\xf2\xf2\x50\x95\x7c\xc9\x16\x6b\xc0\x51\x2c\xff\xff\xd1\x28\x68\xa8\xb6\xf8\x8b\xd7\xf1\xed\x8f\x01\xd3\xee\xd5\x27\xe0\xb8\x0b\x7b\xee\x49\x1e\x9b\x65\xdf\x8c\xf9\x27\x8b\x33\x19\xc5\xba\xe5\xbf\xe9\xd2\x57\x49\x58\xf9\x93\x27\x9e\x8b\xfb\x70\x1f\x58\x72\x48\x28\xad\x8c\x5f\xc4\xe1\x39\xf0\x87\xe0\xab\x35\x5d\xda\x8b\xde\x27\x00\xc0\x00\x8e\x00\xd2\x46\xa0\x0f\x3f\x23\xdc\x1f\x81\xbe\xfc\x43\x1a\xe4\x77\x10\xdd\x41\x08\x20\x36\x29\x36\xb1\xde\x1f\xc5\xd9\x1b\x8e\x12\x29\x9c\x4a\x19\xea\xf5\xd9\x30\x1a\x34\x70\x53\xc3\x15\x0d\xe4\xc3\x1a\x48\x45\x03\xfd\x61\x0d\xec\xc3\x1a\x68\x45\x03\x4f\x35\x20\x88\x09\xf9\xac\x69\x8d\x92\x48\xab\x48\xea\x1d\x24\xa9\x09\xb9\x09\x79\x45\xd2\xe8\x24\x89\xa0\xa9\xc1\x8a\x24\xd4\xba\x89\x22\x93\x56\xa1\x82\xb0\x9b\x28\x36\x71\x35\x52\x88\x3a\x8b\x5e\x39\x8c\x3b\x8b\x56\xeb\x0b\x92\x6e\xa2\xd4\xc4\x55\x80\x21\xed\x2c\x6a\x54\x45\x59\x57\x51\x7a\xe5\x70\x56\x4b\x10\xe1\x66\x41\x56\x93\x55\x5d\x11\xc4\xa8\x51\x10\xa1\xaa\x60\x56\x49\x77\xf0\x86\x28\xad\xe6\x14\x69\xb7\x44\x29\x80\xc8\x84\x86\x49\x58\x26\xfa\x4b\xef\x53\x95\xe3\x12\xf6\xce\x69\x3c\xe6\xb6\xe4\xd6\x15\xfb\x20\x7f\xf8\xe2\x39\x6e\xfe\xf0\x74\x0a\x37\xc5\x2b\x95\xe9\x8a\x95\x94\xe9\x4a\x6b\x93\x64\x10\xcf\xd7\xbe\x26\x1f\xfe\x23\xf0\x94\x3c\xff\x9e\x7e\x76\x5d\x2d\x2c\x0f\x61\x34\xec\x7d\x2a\xb1\x26\x1e\x81\xfe\x78\x77\x59\xdf\x3d\x8a\x28\x00\xda\x88\xee\xc0\xc3\x4e\x9c\x37\x2f\x81\x04\x81\x68\xc8\xe0\x8c\x68\x1a\xd4\x35\x59\x5c\x7d\xf8\x39\x46\xb0\x84\x0e\x31\xa1\x66\xc2\x8c\x58\xb3\x5f\x38\x02\x7d\x2d\xdd\xbd\x0b\xa3\xe0\xd4\x57\x08\xf3\x96\x49\x84\x53\xa3\x2d\x36\xa1\xa9\xb1\xce\x36\x69\x47\x9b\x08\xc7\x55\xd9\x6c\x33\xaf\xbd\xdb\x36\x59\x07\x9b\x99\xd1\x56\x9b\x84\x74\xb6\xa9\x77\xb5\xd9\x1e\x27\xfa\x08\xb6\x46\x67\x9b\xb0\x2d\x4e\x64\xc2\xee\x71\xca\x06\x70\xc3\x68\x6e\xb3\xad\x70\xb9\x89\xdb\x8c\xf6\xd5\xae\xd1\x21\xc8\x5b\xf6\x90\x5e\x30\x50\x4b\x90\xd7\x04\xb3\x5c\xd8\xf3\x64\x16\xcb\xc6\xa7\x84\x57\xe4\x9d\xbd\x17\xe1\x2e\xb9\x8d\x29\x23\xf9\x7f\x01\x65\x21\xe3\x90\x6c\x21\x27\x90\x6c\xe1\x3e\xf9\x48\x4f\xe7\xb2\xb3\x25\x3f\xbd\xab\x44\x21\x7b\x49\xff\x51\x9c\x82\x50\x3a\xba\x97\x37\xff\x5e\x87\x07\x71\x7a\xbf\x7b\x0d\xa3\xcd\x4b\x70\xf8\xec\x07\x45\xc4\xf0\x0e\x41\x00\x99\xa9\x69\x26\x32\x2a\x11\x27\xbf\x9a\xda\x2f\xfa\x5e\xb8\x3f\x4a\xe9\x28\xdc\x1f\x3b\xea\x25\xf8\x86\x5e\x3d\x71\xf4\xf8\x3d\x40\x5a\xd2\x87\x62\xed\xe2\xcf\x60\x2b\xff\xaa\x7a\xb9\xec\x11\x44\x33\xb5\x2a\x95\xa5\x79\x52\x5b\x46\xaa\xb7\xda\x2c\x34\x5d\x4e\x49\x10\x9a\x10\x36\xe8\xb8\x4e\xad\xc4\xdc\xba\x44\x2f\x49\x7a\xe5\x9d\x3a\x21\x67\x6b\x8f\xf1\x97\x7f\xf1\x1c\x8f\xcc\xe5\x01\xd8\x18\x81\x38\x49\x6f\xe2\x7c\xfe\xf3\x78\xf2\xfb\x89\xbf\x40\xfb\x0b\x11\x8c\x18\x44\x04\x43\xac\x21\xc2\x75\x4e\xc9\x9a\x1b\x9c\x72\xc8\x74\xc2\x19\x46\x01\x87\x84\xb1\x2d\xa6\x84\x31\x48\x7c\x8e\x28\xa6\x98\x0a\x14\x50\x9d\xa1\xf8\x3d\xe1\x94\x31\x42\x09\xa5\x1c\x13\x46\x49\xc0\x38\xd5\xd8\x06\x1b\x44\x50\x41\x36\x58\xe7\x06\xd6\x30\xa2\x1a\xa3\x44\x60\x4e\x08\xa6\x14\xab\xa7\x35\xce\xf2\x2d\xd7\x28\xe6\x98\xf8\xd2\x31\x4c\x09\xa1\x84\xe8\x94\x31\x83\x73\x82\xd9\x16\x1b\xcc\xe7\x02\x4b\xe7\xb7\xdc\x40\x81\x74\x93\x13\xac\x53\xc4\x30\x85\x18\x4a\xdf\xb1\x46\x28\xd9\x32\x4e\x11\x65\x44\xe7\x3a\x5b\xb3\x2d\xc1\x9c\x62\x82\x29\xa3\x4c\x10\x83\x23\x6e\xb0\x0d\x66\xea\xc1\x8e\x0b\xe5\x96\x6b\x44\x67\x3e\xe7\x14\x12\x3f\x46\x43\x27\x1b\x46\xd0\x96\x22\xc2\x88\x8e\x02\x6a\x10\x9f\x10\x0e\x19\xc3\x0c\x05\x44\xe7\x98\xe9\x18\x12\x1f\x1b\xcc\xc0\x98\x50\x4e\x98\x41\x28\xe1\x8c\x63\x4e\x36\x18\x13\x4e\xd6\x5c\xc4\xef\x74\x06\xd9\x06\xeb\x54\x22\xec\x63\x4c\xf9\xd5\xcc\xb8\xf3\xc5\x5b\x3e\x7b\xfc\x2f\x00\x00\xff\xff\x1e\x9b\xa0\x55\x0c\x1e\x00\x00")

func resources001_initial_dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_resources001_initial_dbSql,
		"resources/001_initial_db.sql",
	)
}

func resources001_initial_dbSql() (*asset, error) {
	bytes, err := resources001_initial_dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/001_initial_db.sql", size: 7692, mode: os.FileMode(436), modTime: time.Unix(1517235372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/001_initial_db.sql": resources001_initial_dbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"001_initial_db.sql": &bintree{resources001_initial_dbSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

