// Code generated by go-bindata.
// sources:
// repository/sql/migration/resources/001_initial_db.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resources001_initial_dbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5d\x73\xa3\x36\x14\x7d\xe7\x57\xdc\xb7\x75\xa6\xd9\xce\x3a\xb3\x99\x69\xa7\xb3\x0f\x04\x94\x94\x59\x2c\xa7\x18\x3a\xcd\x93\x56\x06\xd9\xd1\xd8\x08\x17\x44\xa6\xf9\xf7\x1d\xf1\x61\x24\x03\x31\xde\xb4\xeb\x27\x2c\xdd\x23\xdd\x8f\x73\x0f\x97\x8f\x1f\xe1\xa7\x94\x6f\x73\x2a\x19\x44\x07\x2b\xce\x99\x7a\x92\x74\xbd\x67\x10\x53\xc9\xb6\x59\xce\x59\x61\xcd\x2c\x68\xff\xbe\x12\x9e\x00\x17\x12\x68\x29\x33\xc2\x45\x9c\xb3\x94\x09\x69\x01\x00\x1c\x72\x9e\xd2\xfc\x15\x76\xec\xf5\xda\x02\x10\x34\x65\xd0\xfc\x5e\x68\x1e\x3f\xd3\x7c\x76\x73\x7b\x7b\x55\x2d\x88\x4c\x82\x28\xf7\x7b\x65\xc8\x0b\xf2\xc2\x0b\xae\x2e\x85\x35\x97\x90\xb0\x0d\x2d\xf7\x12\xd6\x1f\xe6\x1f\x4e\x0d\x69\x2c\xf9\x8b\x3a\xd6\x34\xfc\xd4\x33\xcc\xb3\x4c\x56\x37\x8d\x9e\x68\x5d\x59\x00\x4c\x6c\xb9\x60\xf0\x05\x3c\x21\x32\xf7\x4e\x05\xfa\x4c\xf3\x82\x49\xf8\x02\xa5\xdc\xfc\x92\xae\x3f\xff\x66\x59\x4e\x80\xec\x10\x41\x68\xdf\xf9\xa8\xcb\xc4\x81\xe6\x4c\x48\x92\xd2\xc3\x31\x43\xd9\xb6\xce\x50\xf3\xf3\x70\x08\x76\x14\x2e\x89\x87\x9d\x00\x2d\x10\x0e\x95\x77\x0d\x4e\xcf\xa8\x32\xc4\xcb\x10\x70\xe4\xfb\xca\xe4\x31\xf0\x16\x76\xf0\x04\x5f\xd1\x13\xcc\xb4\x83\xaf\x07\xc0\x57\x55\x20\x08\x3f\x78\x18\xe9\x81\x38\xbf\xdb\xc1\x0a\x85\xe3\x81\x1c\xf2\x2c\x29\x63\xed\xac\x36\x92\x76\x43\x05\x32\x1c\xc2\x64\xdf\xbb\xa3\xae\x75\xd0\x95\x32\x74\x96\x78\x15\x06\xb6\xc2\x0f\xb9\x42\xf8\x7a\xb3\x23\x73\x0b\xe0\x7e\x19\x20\xef\x01\x77\xd9\x68\x4f\x81\x00\xdd\xa3\x00\x61\x07\xad\x34\xbe\x9a\x36\x15\x35\x97\x18\xa2\x47\x57\x85\xee\xd8\x2b\xc7\x76\x51\xbb\xea\x22\x1f\x69\xab\x17\x67\xd2\xc3\x2e\xfa\xeb\x8c\xfb\x4b\x3c\x68\x60\xba\x39\x52\x9c\xa2\x57\x90\xa1\x92\x54\xd1\x68\x79\x57\xd9\x5d\x7d\x8d\x4e\x98\x78\xe6\xa7\xd7\x50\xef\x5d\x80\x3f\xed\x40\xa5\xa0\xeb\xde\xb7\xc1\x0f\xa1\x87\xbb\x9d\x0a\x39\xff\x3c\x06\xac\xc0\x0d\xf0\x90\xf3\xb8\xbb\xd6\x45\x8e\xb7\xb0\xfd\xd9\xfc\xf6\x1a\x6e\x86\xe1\xfa\xad\x34\x49\x58\x42\xa8\x6c\xc0\x76\x88\x42\x6f\x81\xc0\x45\xf7\x76\xe4\x87\xe0\x44\x41\x80\x70\x48\xd4\xe2\x2a\xb4\x17\x8f\x06\x38\x61\x7b\x26\x8f\xf0\x23\xf8\xbc\xcb\xba\x76\x01\xdc\x79\xe1\xf1\xc2\x4a\x6b\xde\x76\xf9\xef\x92\x0a\xc9\xe5\x6b\x3f\xde\x91\x74\x9d\x02\x49\x29\xb8\x9c\x54\x9e\xc8\xf7\xdf\x49\xee\x82\x54\x8c\x12\x09\xfb\xc7\xe0\x74\x01\xb3\x9a\x6a\x8a\xc2\xb6\x1f\xa2\xe0\x2d\x79\x01\xb0\x5d\x77\x5a\xe7\xdf\x58\x46\xdf\x77\x3d\x60\xb4\x7d\xe7\x85\x66\x60\x0d\x77\x7c\xaf\xdf\x4f\x9b\xae\x90\x59\xbc\xab\x3a\xae\x7a\x1a\x11\xc0\xb7\xbb\x6d\x42\xa7\x19\x24\x28\x0b\x96\xd7\xd0\x49\xc8\x1e\x75\x2e\xbd\x8f\x26\x6d\xa3\x74\xad\x30\xad\x49\xb4\xaa\xd5\xe9\x31\x98\xb1\xd9\x9d\x2a\x75\x43\x8b\xe1\x6a\x35\x9b\x3f\x42\x9d\xc7\x9c\x5d\xe2\x7a\x4b\x27\xf0\x00\x50\xd7\xf1\xc6\xbe\xa9\x59\x4f\xb4\x65\x4e\x45\xa1\x46\x94\x4c\xd4\xc2\xad\x2d\xb4\xaf\xca\xf3\x5c\xea\x18\x01\x93\x09\xd5\x94\xc8\x14\xfd\x8b\xa0\x2f\x74\x5f\x6a\x9a\x3f\x41\x7d\x0d\x72\x48\xba\xd5\xb7\x26\x68\xd2\x88\x72\x5f\x4c\xcb\xf2\x90\xd0\x4e\xbb\x35\xf8\xf9\x98\x35\x46\x7f\xd3\x6b\x47\x5a\xb6\xfc\x5c\x27\x94\x6c\x76\xdf\xfe\x37\x76\x2b\xee\xbe\x47\x9f\x1b\xba\xd4\x04\xd5\xa3\x18\xe2\x69\x0d\x99\x12\x6c\xef\xb0\x5e\x93\xd4\x9c\xaf\xee\xa0\xa5\x7c\xae\x19\x7f\xfc\xfb\x9d\x7c\x37\x28\xab\x97\x39\x65\xf2\x39\x4b\x86\xe8\xa5\x5b\x19\x2c\x0e\x3d\xfc\x74\xe7\x2f\xef\x8e\x35\xff\xde\x14\x6f\x76\xa4\x0b\xb3\x7a\xac\x13\xd4\x2d\x8e\x6b\x82\x5a\xd7\x52\x73\xc9\x08\xa7\x4d\x61\x6d\xc0\xf3\x5f\xe7\x53\x46\x30\x96\x52\xbe\x9f\x8e\x6c\x50\xf5\xf7\x5f\xd5\x49\x17\xce\x4f\x5a\x0f\x5e\x36\x3c\xad\xf7\x59\xbc\x63\xc9\xc9\xe4\xf4\xe9\xdc\xe4\xa4\xbe\x04\x93\x94\x8b\xde\xcc\x75\x16\xa9\xb5\x7c\x55\x19\xa2\x92\x4c\xca\x76\xae\x89\xb0\xf7\x47\x84\x60\xa6\x56\x2f\xf9\xb0\xd2\x07\x9f\x7a\x8a\xe8\x4d\x3a\xc6\xdb\xc4\x90\x92\x96\x3a\xba\x96\x54\xce\x75\x5b\xc6\x44\x73\x54\x8c\x21\x19\x39\x71\xc6\x78\x25\xf5\x7c\xda\xec\x88\x21\x05\x35\x59\xdf\xe5\xdc\xd0\xb8\x35\xe2\x9b\x26\x1d\x43\x9e\x9d\xb6\xdc\x7f\xee\xd6\x71\x0a\xfc\x37\x00\x00\xff\xff\x5c\x94\xf2\xa8\x08\x11\x00\x00")

func resources001_initial_dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_resources001_initial_dbSql,
		"resources/001_initial_db.sql",
	)
}

func resources001_initial_dbSql() (*asset, error) {
	bytes, err := resources001_initial_dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/001_initial_db.sql", size: 4360, mode: os.FileMode(420), modTime: time.Unix(1518553623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/001_initial_db.sql": resources001_initial_dbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"001_initial_db.sql": &bintree{resources001_initial_dbSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

