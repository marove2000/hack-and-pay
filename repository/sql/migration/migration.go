// Code generated by go-bindata.
// sources:
// repository/sql/migration/resources/001_initial_db.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resources001_initial_dbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xcc\x6d\x6d\x74\xb7\x58\x07\x1b\xa0\x45\xb0\x07\xd9\x66\x52\x61\x65\x39\x95\xa5\xa2\x39\x69\x69\x89\x76\x08\xdb\x94\x4b\x51\x41\xf3\xef\x0b\x92\xfa\x20\x25\x3b\x96\xb3\x2d\x50\x9f\xa4\xd1\x3c\x72\x66\xf8\xe6\x0d\xfd\xe9\x13\xfc\x74\xa0\x5b\x8e\x05\x81\xf8\xe8\xa4\x9c\xc8\x27\x81\xd7\x7b\x02\x29\x16\x64\x9b\x73\x4a\x0a\x67\xe4\x40\xfd\xfa\x9a\xd0\x0c\x28\x13\x80\x4b\x91\x27\x94\xa5\x9c\x1c\x08\x13\x0e\x00\xc0\x91\xd3\x03\xe6\xaf\xb0\x23\xaf\x1f\x1d\x00\x86\x0f\x04\xaa\xdf\x0b\xe6\xe9\x33\xe6\xa3\x9b\xdb\xdb\xb1\x32\xb0\x5c\x00\x2b\xf7\x7b\xe9\x48\x8b\xe4\x85\x16\x54\x6e\x0a\x6b\x2a\x20\x23\x1b\x5c\xee\x05\xac\x3f\x4c\x3e\x74\x1d\x71\x2a\xe8\x8b\x5c\xd6\x76\xfc\x6c\x3b\x1e\x31\x27\x4c\xc8\x50\x41\x05\x6b\xfd\x6a\xa7\x34\x67\x85\xe0\x58\x7e\x6f\x73\x4d\xfa\x8f\x32\xe5\x64\xb3\x73\x00\x36\x39\x27\x74\xcb\x64\x82\x30\x6a\xf6\x18\x03\x27\x1b\xc2\x09\x4b\x49\x61\xac\x04\x23\x03\x3f\x56\x05\xca\x19\x94\xc7\x4c\x96\x38\xc5\x45\x8a\x33\x52\x5b\x33\xb2\x27\x86\x55\x7a\x13\xb6\xa5\x8c\xc0\x57\xf0\x18\xcb\xe7\x53\x19\xef\x33\xe6\x05\x11\xf0\x15\x4a\xb1\xf9\xe5\xb0\xfe\x72\xe7\xd4\x27\x46\x59\x46\xfe\x1e\x9a\x45\xce\xac\x28\xdb\x3c\xee\x1c\x67\x16\x22\x37\x42\x10\xb9\x53\x1f\xc1\x91\xe7\x59\x99\x0a\x7d\xfe\xd5\x8b\xae\x29\x78\x41\x04\x6e\x1c\x2d\x13\x2f\x98\x85\x68\x81\x82\x48\xa5\xf2\x18\x7a\x0b\x37\x7c\x82\x6f\xe8\x49\x56\x78\xf5\x2d\xae\xfc\x6b\xcc\x85\x5f\xb0\x8c\x20\x88\x7d\xbf\x4b\x1f\x80\x3f\xdc\x70\xf6\x9b\x1b\xb6\x04\x7a\x1b\xfc\x10\x79\x41\xfb\x45\x21\x27\x5f\xce\x01\x15\xb8\x02\x1e\x39\x4d\xdb\x6d\xe7\x68\xe6\x2d\x5c\x7f\x34\xb9\xfd\x08\x37\xa7\xe1\xe6\xae\x38\xcb\x48\x96\xe0\x8a\x6f\x73\x37\x42\x91\xb7\x40\x30\x47\xf7\x6e\xec\x47\x30\x8b\xc3\x10\x05\x51\x22\x8d\xab\xc8\x5d\x3c\x5a\x60\xcd\x81\x1a\xde\x80\x2f\x87\x6c\xb6\x0f\xc0\xd4\x8b\x9a\x0d\x55\x03\xbd\x1d\xf2\x5f\x25\x66\x82\x8a\xd7\x7e\xbe\x67\xca\xd5\x05\x26\x25\xa3\x62\xd0\xf1\xc4\xbe\xaf\x98\x8d\x82\x07\x2f\x40\x26\xb3\x25\x74\x85\x22\x8b\xd9\x15\x13\xbd\x60\x8e\xfe\x6c\x98\x98\x28\x46\x49\xb2\x3b\x00\xcb\xa0\xb1\xc3\x48\x53\x6d\xdc\xb6\x84\x16\xb1\x9a\xb5\x4d\x13\x1c\xf0\xb1\x47\x67\xa9\x00\xa6\x7a\x74\xa5\xce\x52\x96\x56\xe3\x60\xd4\x2e\xf2\xd1\x04\x8d\x3b\xea\x72\x2a\x88\x84\xae\x37\xbb\xe4\xa6\x27\x2a\xcd\x8a\x96\xaa\xb4\x79\x1a\x0e\xd7\x48\xca\xe0\x88\x26\xdd\x88\xcc\xbc\xfe\x2f\x42\xf7\x76\xf8\x39\x3b\xe9\x60\x87\xd9\xd5\xba\x42\xe4\xe9\x4e\x31\x43\x3d\x29\x5e\x5c\x2b\x72\x03\x04\xce\xea\xbd\xb2\x20\x5c\x43\x07\x21\x7b\x1d\x7b\xed\x7e\x38\xab\xf5\xa9\x55\xa0\x61\xda\x34\x5b\x06\xab\x28\x74\xe5\x86\xba\x3c\x56\x43\xaa\xa9\x72\xbf\x0c\x91\xf7\x10\xc8\xaa\x34\xdd\x08\x21\xba\x47\x21\x0a\x66\x68\xd5\x6f\x55\x55\xcb\x65\x00\xf1\xa3\xd4\x3a\x98\xb9\xab\x99\x3b\x47\xb5\x75\x8e\x7c\x64\x58\xdf\xa9\x1b\xe7\x82\x5d\x06\xfa\x93\xa9\x1b\x27\x80\x0d\xa5\x5a\xff\xea\xcc\x7a\xfc\x11\x1c\xb3\x42\x5e\x4e\x72\xa6\xe7\xa5\x61\x90\x67\x3c\x8c\x4b\x2d\x23\x60\x30\xa1\xaa\x23\xb2\x67\xed\x55\xd0\x17\xbc\x2f\x8d\x51\x3b\x60\xe8\x59\xe4\x10\x78\x6b\x7e\x1a\x30\x0a\xce\x0c\xcc\xab\x69\xa9\x35\xa6\x59\xa0\x75\xba\x9c\xb3\xc1\xe8\xef\xe6\xd9\x25\x35\x5b\x7e\xd6\x05\x4d\x36\xbb\xef\xff\x19\xbb\x25\x77\x7f\x64\x2c\x56\x74\xd1\x04\x35\xb3\x38\xc5\x53\x0d\x19\x92\x6c\x6f\xb1\x5e\x93\x68\xce\xab\x3d\x70\x29\x9e\x35\xe3\x9b\xd7\x77\xf2\xdd\xa2\xac\x79\xcc\x07\x22\x9e\xf3\xec\x14\xbd\x4c\x2f\x8b\xc5\x91\x17\x3c\x4d\xfd\xe5\xb4\x39\xf3\xf7\x96\x78\xb3\x4b\xda\x34\xd5\xa3\x2e\x50\x6b\x3c\xaf\x09\xd2\x6e\x94\xe6\x9a\x9b\xb3\x71\xf9\xad\x13\x9e\xfc\x3a\x19\x72\xf3\x25\x07\x4c\xf7\xc3\x91\x15\x4a\x8f\x57\xd5\x49\x57\x5e\x5b\x8d\x1e\xbc\xee\xce\xba\xde\xe7\xe9\x8e\x64\x9d\x0b\xeb\xe7\x4b\x17\x56\xf9\x1f\x30\x3b\x50\xd6\xbb\xea\x5e\x44\x1a\x2d\xaf\x4e\x26\x91\x45\x4e\xca\xfa\x3a\x19\x07\xde\xef\x31\x82\x91\xb4\x8e\xaf\xa0\x8b\xeb\x47\x28\xb4\x6e\x11\x00\xee\x7c\xde\x9f\x99\xd5\x34\xb1\xa4\xa4\xa6\x8e\xa9\x25\x2a\xb8\xf6\x93\x63\xea\x48\xa3\x18\xa7\x64\xa4\x13\x8c\x35\x92\x7a\x31\x6d\x76\x89\x25\x05\x9a\xac\x3f\x14\x5c\x2b\x72\x17\x63\x33\xa4\xe3\x54\x64\xdd\x96\xfb\xd7\xc3\xaa\x6c\x77\xce\x3f\x01\x00\x00\xff\xff\xff\xc5\x03\x0f\x02\x11\x00\x00")

func resources001_initial_dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_resources001_initial_dbSql,
		"resources/001_initial_db.sql",
	)
}

func resources001_initial_dbSql() (*asset, error) {
	bytes, err := resources001_initial_dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/001_initial_db.sql", size: 4354, mode: os.FileMode(420), modTime: time.Unix(1519906476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/001_initial_db.sql": resources001_initial_dbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"001_initial_db.sql": &bintree{resources001_initial_dbSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

