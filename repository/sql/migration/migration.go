// Code generated by go-bindata.
// sources:
// repository/sql/migration/resources/001_initial_db.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resources001_initial_dbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x4b\x6f\xdb\x38\x10\xbe\xeb\x57\xcc\x2d\x36\xd6\x5d\x54\x41\x0b\xec\xa2\xe8\x41\x96\x98\xac\x50\x99\xca\xca\xd4\xa2\x39\xb1\xb2\x25\xa7\x82\x6d\xc9\xab\x47\xb0\xf9\xf7\x0b\xea\xc5\xd1\xc3\xb6\x14\x37\x27\x8b\xe4\x90\xdf\xcc\x7c\x33\x1f\x99\x0f\x1f\xe0\xb7\x63\xf8\x92\x78\x59\x00\xee\x49\x51\x74\x87\x68\x8c\x00\xd3\x96\x16\x01\xf3\x01\xa8\xcd\x80\x7c\x37\xd7\x6c\x0d\x5b\x2f\x0b\x5e\xe2\x24\x0c\x52\x98\x29\x50\x7f\xbe\xf1\xd0\x07\x93\xb2\x99\xaa\xce\x01\xa0\x30\xa0\xae\x65\x01\x68\x2e\xb3\xb9\x49\x75\x87\xac\x08\x65\x0b\x05\x20\xf2\x8e\x01\x54\x7f\x03\x26\x62\xc9\x6b\x98\x86\x9b\x43\xb9\x8a\x99\xf4\xb9\x58\x36\x47\xbb\x1a\xe4\x41\x73\x2d\x06\x77\xea\x9d\x58\xef\x6d\xb3\xf0\xb5\xda\xf4\xf2\xfa\x8f\xc5\xfa\x30\xe5\x49\x1c\x67\xa3\xf7\x7f\x72\xcc\x95\xe6\x3c\xc3\x37\xf2\x0c\x33\xe4\xf2\x5c\x99\x2b\x00\x84\x3e\x9a\x94\xc0\x57\x30\xa3\x28\x36\x96\x8a\x34\xd7\xff\xd2\x9c\x35\x61\xf0\x15\xf2\x6c\xf7\xc7\x71\xf3\xe9\xcb\x98\xd8\xbe\xf1\x93\x97\x04\x51\xc6\x8f\xde\xa9\x09\x72\xfc\x52\x06\xb9\x13\xb8\x4b\x81\xae\x76\x19\x4a\x11\x0e\x76\xcf\xb9\xea\xa8\xc5\xc0\x06\x37\x3b\x9c\x25\x5e\x94\x8a\x74\xc5\x51\xaa\x08\xdf\xd0\x40\x05\xb0\xe3\x89\x22\xdc\x45\x18\x05\xe4\x3c\x0d\x92\x76\x30\xe0\xda\x5f\xed\xed\xfa\x9b\x8b\x2c\x27\x99\xbe\x7a\x87\x3c\x90\xc3\x06\xd1\xcd\x95\x66\xcd\xd4\xcf\x0b\xb8\x9f\x9f\x31\x45\x71\xce\xbc\x17\x3c\xf5\x8f\xe6\x88\x68\xcd\xee\x3f\x7f\x3e\x63\x2c\x4f\xf6\x7c\x3f\xf0\xb9\x97\x55\xc3\xcc\x5c\x91\x35\xd3\x56\x4f\x32\xee\xae\xe3\x10\xca\xb8\x9c\xc1\x27\xe7\x27\xdf\xcb\xe4\x06\x72\xd1\x75\x9f\x75\x9b\xae\x99\xa3\x89\x30\xed\xf6\x1c\x67\x8f\x8b\x24\xa4\x0a\xc0\x83\xed\x10\xf3\x91\x96\xfc\xa9\x32\x33\x07\x87\x3c\x10\x87\x50\x9d\xac\x8b\x6c\xa5\x72\xaa\x48\xa8\x4d\xc1\x7d\x32\x04\x2f\x74\x6d\xad\x6b\x06\xa9\x47\x0d\x62\x11\x46\x40\x90\x68\x00\xc3\x8f\x16\x02\x7e\x4a\x62\x3f\xdf\x66\xbf\x97\x49\xe5\xbb\xfd\x8f\x2e\x9e\x72\xa6\x05\xa7\x32\x4a\x9b\xc9\x33\x80\x86\x99\x7e\x81\xe1\x26\x35\xc8\xf7\x9a\x9b\x4a\xb1\x25\x86\x2b\x23\xd0\x35\x19\xe3\x55\x6f\xb3\x0a\x7c\xb7\xc0\x6a\xef\x8a\xe2\xaa\x3e\x2a\xc2\x8f\xab\xad\x76\x81\x8c\xa8\x0f\xcc\x34\xdc\xdb\x47\x51\x1c\x1b\x3f\x32\x93\xca\x99\xc2\x52\xfd\x74\xb6\x36\x10\x49\x4f\x49\xb8\x95\xc7\x8e\xa8\x4b\x7c\x6a\xbb\xb6\x04\x03\x44\x7d\x8c\xac\x2c\x3f\x38\x04\xb2\xb2\x1a\xe3\xeb\x90\xc3\x94\x23\x91\x5b\x9a\xac\x39\x70\x73\xa7\xde\x5d\x81\xfc\x6f\xee\x45\x59\x98\xbd\x8d\xf7\xb7\x63\xc8\xf3\x28\xcc\x46\xa5\xc7\xb5\xac\xf7\x16\x42\xcd\x44\x5e\x30\x2a\xf2\x83\xff\x4a\x1a\xf7\xea\xef\x8b\x72\x51\x15\x6b\x12\x37\x32\x54\xcb\x22\x66\xf7\x18\x3d\x9c\x24\x84\x72\xf3\x05\xfc\x4a\x01\x4c\xb3\x78\xbb\x2f\x8a\xb3\xf8\x55\x83\x9f\x54\x98\xa3\x44\x0b\xf7\xff\x46\x2e\xa7\xc8\x9d\x64\xd9\xd4\xf3\x3c\xbf\xae\xa9\xa9\x4a\x85\x5a\x7d\x19\x9e\x16\x89\x76\xfb\x5f\xd8\xde\xa1\xa5\x37\xd5\xe8\x20\x86\x70\xb3\xdb\x73\xf5\x76\xa5\xab\x35\xed\x8c\xd4\xbd\xb7\xce\xce\x05\xca\xa6\xe5\xd4\x80\x54\x60\xc3\xc6\x3b\xb9\xbe\xaf\x53\x25\x77\x4b\xc5\x9f\xb5\x2f\x60\xe3\xc8\x8b\x84\xa1\x6e\x3b\xea\x9f\xea\x18\x55\x08\x8e\x5e\x78\x18\x6f\x59\x59\x6d\x93\xa0\xbe\xf2\x4c\x6c\xe9\xe8\xb2\x34\xad\x9f\x6f\x0e\xf1\x76\x1f\xf8\x9d\x66\xfe\xf1\x5a\x33\x0f\x53\xee\xf9\xc7\x30\xea\xc9\xc0\x55\x4b\x44\xd4\x22\x33\x5c\x04\x99\xe7\x75\xab\x75\xa9\xf9\xb7\x4b\x60\x26\x46\xcf\xb5\xad\x89\x0f\x94\x22\xed\x5e\x9e\xfd\x2c\x1f\x7f\xcd\x67\xe7\xf5\x77\xf9\xfd\xd7\xba\xbc\x0f\x5a\x89\x55\xc7\x20\xfb\x19\xfb\x1d\xca\x14\x4a\xd5\x7a\x28\xe2\x2b\xb9\x78\xc9\x2d\x2d\x7b\xd9\xeb\xe5\x18\xe7\x7b\x1a\xb8\x66\x31\xe2\x0c\x3d\x60\x00\x34\xc3\xb8\x7a\x47\x7e\x4f\xdf\x90\xed\x81\xda\xa0\xe9\xcc\xb4\xa9\x82\x7b\x49\x33\xda\x81\x37\x24\x96\x7d\x98\x43\xab\xaa\x46\xd0\x06\x8b\x95\x0f\x03\xc6\xff\x05\x68\xa9\xe3\x40\x4f\x55\x06\xba\xef\x62\x0a\xa6\xfb\x36\x26\xa9\xcc\x67\xfa\x3e\x5a\x30\x16\x4f\x27\x8a\xa5\x48\xf7\x20\xe2\x86\x79\x5b\x52\x91\x14\xf4\xf5\x61\x20\x38\xe8\xe4\xfb\x09\x0a\x78\x7b\x24\x64\xc5\x0f\x92\x5d\x4e\x17\x3f\x6f\x0b\xca\x25\x54\xff\x07\x00\x00\xff\xff\x53\x8d\x44\xa8\xa2\x12\x00\x00")

func resources001_initial_dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_resources001_initial_dbSql,
		"resources/001_initial_db.sql",
	)
}

func resources001_initial_dbSql() (*asset, error) {
	bytes, err := resources001_initial_dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/001_initial_db.sql", size: 4770, mode: os.FileMode(420), modTime: time.Unix(1518093875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/001_initial_db.sql": resources001_initial_dbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"001_initial_db.sql": &bintree{resources001_initial_dbSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

